<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shytiger Blog</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-13T12:09:30.534Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/08/13/%E6%85%95%E8%AF%BE%E7%BD%91-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/08/13/%E6%85%95%E8%AF%BE%E7%BD%91-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2020-08-13T12:09:30.529Z</published>
    <updated>2020-08-13T12:09:30.534Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head>      <title>&#x6155;&#x8BFE;&#x7F51;-&#x7B97;&#x6CD5;&#x4E0E;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x2014;&#x5B66;&#x4E60;&#x603B;&#x7ED3;</title>      <meta charset="utf-8">      <meta name="viewport" content="width=device-width, initial-scale=1.0">            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css">                                                            <style>      /** * prism.js Github theme based on GitHub's theme. * @author Sam Clarke */code[class*="language-"],pre[class*="language-"] {  color: #333;  background: none;  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;  text-align: left;  white-space: pre;  word-spacing: normal;  word-break: normal;  word-wrap: normal;  line-height: 1.4;  -moz-tab-size: 8;  -o-tab-size: 8;  tab-size: 8;  -webkit-hyphens: none;  -moz-hyphens: none;  -ms-hyphens: none;  hyphens: none;}/* Code blocks */pre[class*="language-"] {  padding: .8em;  overflow: auto;  /* border: 1px solid #ddd; */  border-radius: 3px;  /* background: #fff; */  background: #f5f5f5;}/* Inline code */:not(pre) > code[class*="language-"] {  padding: .1em;  border-radius: .3em;  white-space: normal;  background: #f5f5f5;}.token.comment,.token.blockquote {  color: #969896;}.token.cdata {  color: #183691;}.token.doctype,.token.punctuation,.token.variable,.token.macro.property {  color: #333;}.token.operator,.token.important,.token.keyword,.token.rule,.token.builtin {  color: #a71d5d;}.token.string,.token.url,.token.regex,.token.attr-value {  color: #183691;}.token.property,.token.number,.token.boolean,.token.entity,.token.atrule,.token.constant,.token.symbol,.token.command,.token.code {  color: #0086b3;}.token.tag,.token.selector,.token.prolog {  color: #63a35c;}.token.function,.token.namespace,.token.pseudo-element,.token.class,.token.class-name,.token.pseudo-class,.token.id,.token.url-reference .token.variable,.token.attr-name {  color: #795da3;}.token.entity {  cursor: help;}.token.title,.token.title .token.punctuation {  font-weight: bold;  color: #1d3e81;}.token.list {  color: #ed6a43;}.token.inserted {  background-color: #eaffea;  color: #55a532;}.token.deleted {  background-color: #ffecec;  color: #bd2c00;}.token.bold {  font-weight: bold;}.token.italic {  font-style: italic;}/* JSON */.language-json .token.property {  color: #183691;}.language-markup .token.tag .token.punctuation {  color: #333;}/* CSS */code.language-css,.language-css .token.function {  color: #0086b3;}/* YAML */.language-yaml .token.atrule {  color: #63a35c;}code.language-yaml {  color: #183691;}/* Ruby */.language-ruby .token.function {  color: #333;}/* Markdown */.language-markdown .token.url {  color: #795da3;}/* Makefile */.language-makefile .token.symbol {  color: #795da3;}.language-makefile .token.variable {  color: #183691;}.language-makefile .token.builtin {  color: #0086b3;}/* Bash */.language-bash .token.keyword {  color: #0086b3;}/* highlight */pre[data-line] {  position: relative;  padding: 1em 0 1em 3em;}pre[data-line] .line-highlight-wrapper {  position: absolute;  top: 0;  left: 0;  background-color: transparent;  display: block;  width: 100%;}pre[data-line] .line-highlight {  position: absolute;  left: 0;  right: 0;  padding: inherit 0;  margin-top: 1em;  background: hsla(24, 20%, 50%,.08);  background: linear-gradient(to right, hsla(24, 20%, 50%,.1) 70%, hsla(24, 20%, 50%,0));  pointer-events: none;  line-height: inherit;  white-space: pre;}pre[data-line] .line-highlight:before, pre[data-line] .line-highlight[data-end]:after {  content: attr(data-start);  position: absolute;  top: .4em;  left: .6em;  min-width: 1em;  padding: 0 .5em;  background-color: hsla(24, 20%, 50%,.4);  color: hsl(24, 20%, 95%);  font: bold 65%/1.5 sans-serif;  text-align: center;  vertical-align: .3em;  border-radius: 999px;  text-shadow: none;  box-shadow: 0 1px white;}pre[data-line] .line-highlight[data-end]:after {  content: attr(data-end);  top: auto;  bottom: .4em;}html body{font-family:"Helvetica Neue",Helvetica,"Segoe UI",Arial,freesans,sans-serif;font-size:16px;line-height:1.6;color:#333;background-color:#fff;overflow:initial;box-sizing:border-box;word-wrap:break-word}html body>:first-child{margin-top:0}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{line-height:1.2;margin-top:1em;margin-bottom:16px;color:#000}html body h1{font-size:2.25em;font-weight:300;padding-bottom:.3em}html body h2{font-size:1.75em;font-weight:400;padding-bottom:.3em}html body h3{font-size:1.5em;font-weight:500}html body h4{font-size:1.25em;font-weight:600}html body h5{font-size:1.1em;font-weight:600}html body h6{font-size:1em;font-weight:600}html body h1,html body h2,html body h3,html body h4,html body h5{font-weight:600}html body h5{font-size:1em}html body h6{color:#5c5c5c}html body strong{color:#000}html body del{color:#5c5c5c}html body a:not([href]){color:inherit;text-decoration:none}html body a{color:#08c;text-decoration:none}html body a:hover{color:#00a3f5;text-decoration:none}html body img{max-width:100%}html body>p{margin-top:0;margin-bottom:16px;word-wrap:break-word}html body>ul,html body>ol{margin-bottom:16px}html body ul,html body ol{padding-left:2em}html body ul.no-list,html body ol.no-list{padding:0;list-style-type:none}html body ul ul,html body ul ol,html body ol ol,html body ol ul{margin-top:0;margin-bottom:0}html body li{margin-bottom:0}html body li.task-list-item{list-style:none}html body li>p{margin-top:0;margin-bottom:0}html body .task-list-item-checkbox{margin:0 .2em .25em -1.8em;vertical-align:middle}html body .task-list-item-checkbox:hover{cursor:pointer}html body blockquote{margin:16px 0;font-size:inherit;padding:0 15px;color:#5c5c5c;background-color:#f0f0f0;border-left:4px solid #d6d6d6}html body blockquote>:first-child{margin-top:0}html body blockquote>:last-child{margin-bottom:0}html body hr{height:4px;margin:32px 0;background-color:#d6d6d6;border:0 none}html body table{margin:10px 0 15px 0;border-collapse:collapse;border-spacing:0;display:block;width:100%;overflow:auto;word-break:normal;word-break:keep-all}html body table th{font-weight:bold;color:#000}html body table td,html body table th{border:1px solid #d6d6d6;padding:6px 13px}html body dl{padding:0}html body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:bold}html body dl dd{padding:0 16px;margin-bottom:16px}html body code{font-family:Menlo,Monaco,Consolas,'Courier New',monospace;font-size:.85em !important;color:#000;background-color:#f0f0f0;border-radius:3px;padding:.2em 0}html body code::before,html body code::after{letter-spacing:-0.2em;content:"\00a0"}html body pre>code{padding:0;margin:0;font-size:.85em !important;word-break:normal;white-space:pre;background:transparent;border:0}html body .highlight{margin-bottom:16px}html body .highlight pre,html body pre{padding:1em;overflow:auto;font-size:.85em !important;line-height:1.45;border:#d6d6d6;border-radius:3px}html body .highlight pre{margin-bottom:0;word-break:normal}html body pre code,html body pre tt{display:inline;max-width:initial;padding:0;margin:0;overflow:initial;line-height:inherit;word-wrap:normal;background-color:transparent;border:0}html body pre code:before,html body pre tt:before,html body pre code:after,html body pre tt:after{content:normal}html body p,html body blockquote,html body ul,html body ol,html body dl,html body pre{margin-top:0;margin-bottom:16px}html body kbd{color:#000;border:1px solid #d6d6d6;border-bottom:2px solid #c7c7c7;padding:2px 4px;background-color:#f0f0f0;border-radius:3px}@media print{html body{background-color:#fff}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{color:#000;page-break-after:avoid}html body blockquote{color:#5c5c5c}html body pre{page-break-inside:avoid}html body table{display:table}html body img{display:block;max-width:100%;max-height:100%}html body pre,html body code{word-wrap:break-word;white-space:pre}}.markdown-preview{width:100%;height:100%;box-sizing:border-box}.markdown-preview .pagebreak,.markdown-preview .newpage{page-break-before:always}.markdown-preview pre.line-numbers{position:relative;padding-left:3.8em;counter-reset:linenumber}.markdown-preview pre.line-numbers>code{position:relative}.markdown-preview pre.line-numbers .line-numbers-rows{position:absolute;pointer-events:none;top:1em;font-size:100%;left:0;width:3em;letter-spacing:-1px;border-right:1px solid #999;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.markdown-preview pre.line-numbers .line-numbers-rows>span{pointer-events:none;display:block;counter-increment:linenumber}.markdown-preview pre.line-numbers .line-numbers-rows>span:before{content:counter(linenumber);color:#999;display:block;padding-right:.8em;text-align:right}.markdown-preview .mathjax-exps .MathJax_Display{text-align:center !important}.markdown-preview:not([for="preview"]) .code-chunk .btn-group{display:none}.markdown-preview:not([for="preview"]) .code-chunk .status{display:none}.markdown-preview:not([for="preview"]) .code-chunk .output-div{margin-bottom:16px}.scrollbar-style::-webkit-scrollbar{width:8px}.scrollbar-style::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}.scrollbar-style::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode]){position:relative;width:100%;height:100%;top:0;left:0;margin:0;padding:0;overflow:auto}html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{position:relative;top:0}@media screen and (min-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em calc(50% - 457px + 2em)}}@media screen and (max-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{font-size:14px !important;padding:1em}}@media print{html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{display:none}}html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{position:fixed;bottom:8px;left:8px;font-size:28px;cursor:pointer;color:inherit;z-index:99;width:32px;text-align:center;opacity:.4}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] #sidebar-toc-btn{opacity:1}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc{position:fixed;top:0;left:0;width:300px;height:100%;padding:32px 0 48px 0;font-size:14px;box-shadow:0 0 4px rgba(150,150,150,0.33);box-sizing:border-box;overflow:auto;background-color:inherit}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar{width:8px}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc a{text-decoration:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{padding:0 1.6em;margin-top:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc li{margin-bottom:.8em}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc ul{list-style-type:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{left:300px;width:calc(100% -  300px);padding:2em calc(50% - 457px -  150px);margin:0;box-sizing:border-box}@media screen and (max-width:1274px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{width:100%}}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .markdown-preview{left:50%;transform:translateX(-50%)}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .md-sidebar-toc{display:none}/* Please visit the URL below for more information: *//*   https://shd101wyy.github.io/markdown-preview-enhanced/#/customize-css */      </style>    </head>    <body for="html-export">      <div class="mume markdown-preview  ">      <blockquote><p><strong>&#x6155;&#x8BFE;&#x7F51;-&#x7B97;&#x6CD5;&#x4E0E;&#x6570;&#x636E;&#x7ED3;&#x6784;-&#x5B66;&#x4E60;&#x603B;&#x7ED3;</strong></p></blockquote><hr><h1 class="mume-header" id="%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BC%95%E8%A8%80">&#x7B2C;&#x4E00;&#x7AE0; &#x5F15;&#x8A00;</h1><p><a href="https://github.com/liuyubobobo/Play-with-Algorithms">&#x8BFE;&#x7A0B;&#x6E90;&#x7801;play-with-Algorithms</a></p><h1 class="mume-header" id="%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%8E%92%E5%BA%8F%E5%9F%BA%E7%A1%80">&#x7B2C;&#x4E8C;&#x7AE0; &#x6392;&#x5E8F;&#x57FA;&#x7840;</h1><ul><li><strong>&#x6392;&#x5E8F;&#x7684;&#x7A33;&#x5B9A;&#x6027;</strong><br>&#x6392;&#x5E8F;&#x540E;&#x662F;&#x5426;&#x6539;&#x53D8;&#x539F;&#x5E8F;&#x5217;&#x952E;&#x503C;&#x76F8;&#x540C;&#x7684;&#x5E8F;&#x5217;&#x7684;&#x5148;&#x540E;&#x5173;&#x7CFB;</li><li><strong>&#x5185;&#x6392;&#x5E8F;&#x4E0E;&#x5916;&#x6392;&#x5E8F;</strong><br>&#x5916;&#x6392;&#x5E8F;&#xFF1A; &#x7531;&#x4E8E;&#x6392;&#x5E8F;&#x8BB0;&#x5F55;&#x4E2A;&#x6570;&#x592A;&#x591A;&#xFF0C;&#x4E0D;&#x80FD;&#x540C;&#x65F6;&#x653E;&#x7F6E;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#xFF0C;&#x6574;&#x4E2A;&#x6392;&#x5E8F;&#x8FC7;&#x7A0B;&#x9700;&#x8981;&#x5728;&#x5185;&#x5916;&#x5B58;&#x4E4B;&#x95F4;&#x591A;&#x6B21;&#x4EA4;&#x6362;&#x6570;&#x636E;&#x624D;&#x80FD;&#x8FDB;&#x884C; &#x3002;&#x5916;&#x90E8;&#x6392;&#x5E8F;&#x6700;&#x5E38;&#x7528;&#x7684;&#x7B97;&#x6CD5;&#x662F;&#x591A;&#x8DEF;&#x5F52;&#x5E76;&#x6392;&#x5E8F;</li><li><strong>&#x5F71;&#x54CD;&#x6392;&#x5E8F;&#x7684;&#x4E09;&#x4E2A;&#x65B9;&#x9762;</strong><ul><li>&#x65F6;&#x95F4;&#x6027;&#x80FD;<ul><li>&#x6BD4;&#x8F83;</li><li>&#x79FB;&#x52A8;</li></ul></li><li>&#x8F85;&#x52A9;&#x7A7A;&#x95F4;</li><li>&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;</li></ul></li></ul><h2 class="mume-header" id="%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F">&#x4EA4;&#x6362;&#x6392;&#x5E8F;</h2><ul><li>&#x5192;&#x6CE1;&#x6392;&#x5E8F;<ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A;&#x4E24;&#x4E24;&#x4EA4;&#x6362;&#xFF0C;&#x5C06;&#x6700;&#x5927;&#xFF08;&#x6216;&#x6700;&#x5C0F;&#xFF09;&#x7684;&#x4EA4;&#x6362;&#x81F3;&#x961F;&#x5217;&#x524D;</li></ul></li></ul><h2 class="mume-header" id="%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F">&#x9009;&#x62E9;&#x6392;&#x5E8F;</h2><ul><li>&#x7B80;&#x5355;&#x9009;&#x62E9;&#x6392;&#x5E8F;<ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A;&#x5728;&#x672A;&#x6392;&#x5E8F;&#x7684;&#x5E8F;&#x5217;&#x79CD;&#x627E;&#x5230;&#x6700;&#x5C0F;&#xFF08;&#x6216;&#x6700;&#x5927;&#xFF09;&#x7684;&#x5143;&#x7D20;&#x653E;&#x5230;&#x524D;&#x9762;</li><li><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cucnVub29iLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8wOS9TZWxlY3Rpb24tU29ydC1BbmltYXRpb24uZ2lm" alt="&#x52A8;&#x753B;&#x6F14;&#x793A;"></li></ul></li><li>&#x53C2;&#x8003;&#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF08;cpp&#xFF09;<pre data-role="codeBlock" data-info class="language-"><code>    template&lt;typename T&gt;    void selectionSort(T arr[], int n)&#123;        for(int i = 0 ; i &lt; n ; i ++)&#123;            int minIndex = i;            for( int j = i + 1 ; j &lt; n ; j ++ )                if( arr[j] &lt; arr[minIndex] )                    minIndex = j;            swap( arr[i] , arr[minIndex] );        &#125;    &#125;</code></pre></li><li>&#x76F4;&#x63A5;&#x9009;&#x62E9;&#x6392;&#x5E8F;</li><li>&#x6811;&#x578B;&#x9009;&#x62E9;&#x6392;&#x5E8F;</li></ul><h2 class="mume-header" id="%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E5%8F%8A%E5%85%B6%E6%94%B9%E8%BF%9B">&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x53CA;&#x5176;&#x6539;&#x8FDB;</h2><ul><li>&#x76F4;&#x63A5;&#x63D2;&#x5165;&#x6392;&#x5E8F;<ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3;: &#x5C06;&#x672A;&#x6392;&#x5E8F;&#x7684;&#x5143;&#x7D20;&#x63D2;&#x5165;&#x5230;&#x5DF2;&#x7ECF;&#x6392;&#x597D;&#x5E8F;&#x7684;&#x961F;&#x5217;&#x79CD;&#x5BF9;&#x5E94;&#x7684;&#x4F4D;&#x7F6E;</li><li><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMTAxNjU5NC0xNTBiNmM0NjJlM2VkODA5LnBuZw?x-oss-process=image/format,png" alt="&#x793A;&#x610F;&#x56FE;"></li><li>&#x4EE3;&#x7801;<pre data-role="codeBlock" data-info class="language-"><code>template&lt;typename T&gt;void insertionSort(T arr[], int n)&#123;    for( int i = 1 ; i &lt; n ; i ++ ) &#123;    // &#x5BFB;&#x627E;&#x5143;&#x7D20;arr[i]&#x5408;&#x9002;&#x7684;&#x63D2;&#x5165;&#x4F4D;&#x7F6E;    // &#x5199;&#x6CD5;1    //        for( int j = i ; j &gt; 0 ; j-- )    //            if( arr[j] &lt; arr[j-1] )    //                swap( arr[j] , arr[j-1] );    //            else    //                break;    // &#x5199;&#x6CD5;2    //        for( int j = i ; j &gt; 0 &amp;&amp; arr[j] &lt; arr[j-1] ; j -- )    //            swap( arr[j] , arr[j-1] );    // &#x5199;&#x6CD5;3                T e = arr[i];                int j; // j&#x4FDD;&#x5B58;&#x5143;&#x7D20;e&#x5E94;&#x8BE5;&#x63D2;&#x5165;&#x7684;&#x4F4D;&#x7F6E;                for (j = i; j &gt; 0 &amp;&amp; arr[j-1] &gt; e; j--)                    arr[j] = arr[j-1];                arr[j] = e;    &#125;    return;&#125;</code></pre></li><li>&#x6539;&#x8FDB;&#xFF1A;<ul><li><strong>&#x6298;&#x534A;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF1A;</strong> &#x627E;&#x5230;&#x5DF2;&#x6392;&#x597D;&#x5E8F;&#x79CD;&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x65F6; &#x7528; &#x6298;&#x534A;&#x67E5;&#x627E;</li><li><strong>&#x5E0C;&#x5C14;&#x6392;&#x5E8F;</strong>:<ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A;&#x4EA4;&#x6362;&#x4E0D;&#x76F8;&#x90BB;&#x7684;&#x5143;&#x7D20;&#x4EE5;&#x5BF9;&#x6570;&#x7EC4;&#x7684;<strong>&#x5C40;&#x90E8;</strong>&#x8FDB;&#x884C;&#x6392;&#x5E8F;</li><li><img src="https://upload-images.jianshu.io/upload_images/7779232-d19c19b7153b27b2.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/665/format/webp" alt></li><li>&#x7B2C;&#x4E00;&#x4E2A;O(n log n)&#x7684;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;</li><li>&#x53C2;&#x8003;&#x4EE3;&#x7801;<pre data-role="codeBlock" data-info class="language-"><code>template&lt;typename T&gt;void shellSort(T arr[], int n)&#123;    // &#x8BA1;&#x7B97; increment sequence: 1, 4, 13, 40, 121, 364, 1093...    int h = 1;    while( h &lt; n/3 )        h = 3 * h + 1;    while( h &gt;= 1 )&#123;        // h-sort the array        for( int i = h ; i &lt; n ; i ++ )&#123;            // &#x5BF9; arr[i], arr[i-h], arr[i-2*h], arr[i-3*h]... &#x4F7F;&#x7528;&#x63D2;&#x5165;&#x6392;&#x5E8F;            T e = arr[i];            int j;            for( j = i ; j &gt;= h &amp;&amp; e &lt; arr[j-h] ; j -= h )                arr[j] = arr[j-h];            arr[j] = e;        &#125;        h /= 3;    &#125;&#125;</code></pre></li><li><a href="https://www.jianshu.com/p/642b19f8a69c">&#x5E0C;&#x5C14;&#x6392;&#x5E8F;&#x53CA;&#x5176;&#x4F18;&#x5316;</a></li></ul></li><li>&#x5176;&#x4ED6;&#xFF1A; &#x8DEF;&#x63D2;&#x5165;&#x6392;&#x5E8F;,&#x8868;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x7B49;&#x3002;</li></ul></li></ul></li></ul><hr><h1 class="mume-header" id="%E7%AC%AC%E4%B8%89%E7%AB%A0-%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98">&#x7B2C;&#x4E09;&#x7AE0; &#x9AD8;&#x7EA7;&#x6392;&#x5E8F;&#x95EE;&#x9898;</h1><h2>&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x53CA;&#x5176;&#x4F18;&#x5316;</h2><ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A; (&#x5206;&#x6CBB;)&#x5C06;&#x6392;&#x5E8F;&#x5E8F;&#x5217;&#x5DEE;&#x5206;&#x6210; &#x4E24;&#x4E2A;&#x7B49;&#x957F;&#x7684;&#x5B50;&#x5E8F;&#x5217;&#xFF0C;&#x5BF9;&#x5B50;&#x5E8F;&#x5217;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x540E;&#x518D;&#x5F52;&#x5E76;</li><li>&#x53C2;&#x8003;&#x6838;&#x5FC3;&#x4EE3;&#x7801;(cpp)<pre data-role="codeBlock" data-info class="language-"><code>    // &#x4F7F;&#x7528;&#x4F18;&#x5316;&#x7684;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;, &#x5BF9;arr[l...r]&#x7684;&#x8303;&#x56F4;&#x8FDB;&#x884C;&#x6392;&#x5E8F;    template&lt;typename T&gt;    void __mergeSort2(T arr[], int l, int r)&#123;        // &#x4F18;&#x5316;2: &#x5BF9;&#x4E8E;&#x5C0F;&#x89C4;&#x6A21;&#x6570;&#x7EC4;, &#x4F7F;&#x7528;&#x63D2;&#x5165;&#x6392;&#x5E8F;        if( r - l &lt;= 15 )&#123;            insertionSort(arr, l, r);            return;        &#125;        int mid = (l+r)/2;        __mergeSort2(arr, l, mid);        __mergeSort2(arr, mid+1, r);        // &#x4F18;&#x5316;1: &#x5BF9;&#x4E8E;arr[mid] &lt;= arr[mid+1]&#x7684;&#x60C5;&#x51B5;,&#x4E0D;&#x8FDB;&#x884C;merge        // &#x5BF9;&#x4E8E;&#x8FD1;&#x4E4E;&#x6709;&#x5E8F;&#x7684;&#x6570;&#x7EC4;&#x975E;&#x5E38;&#x6709;&#x6548;,&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x4E00;&#x822C;&#x60C5;&#x51B5;,&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x6027;&#x80FD;&#x635F;&#x5931;        if( arr[mid] &gt; arr[mid+1] )            __merge(arr, l, mid, r);    &#125;</code></pre></li><li>&#x4F18;&#x5316;&#x70B9;&#xFF1A;<br>- &#x5F53;&#x6392;&#x5E8F;&#x7684;&#x5143;&#x7D20;&#x5C11;&#x4E8E;&#x4E00;&#x5B9A;&#xFF08;16&#xFF09;&#x65F6;&#xFF0C;&#x76F4;&#x63A5;&#x8C03;&#x7528; &#x63D2;&#x5165;&#x6392;&#x5E8F;<br>- &#x5982;&#x679C;&#x7B2C;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#x7684;&#x6700;&#x5927;&#x503C;&#x5C0F;&#x4E8E;&#x7B2C;&#x4E8C;&#x4E2A;&#x5E8F;&#x5217;&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF0C;&#x5219;&#x4E0D;&#x7528;&#x6BD4;&#x8F83;&#xFF0C;&#x76F4;&#x63A5;&#x5408;&#x5E76;</li><li>&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x5199;&#x6CD5;&#xFF08;&#x8FED;&#x4EE3;&#xFF09;<ul><li><p><strong>&#x6838;&#x5FC3;&#x4EE3;&#x7801;&#x53C2;&#x8003;</strong><br>```</p><pre class="language-text">  // &#x4F7F;&#x7528;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x7684;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;  template &lt;typename T&gt;  void mergeSortBU(T arr[], int n)&#123;      // Merge Sort Bottom Up &#x4F18;&#x5316;      // &#x5BF9;&#x4E8E;&#x5C0F;&#x6570;&#x7EC4;, &#x4F7F;&#x7528;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x4F18;&#x5316;      for( int i = 0 ; i &lt; n ; i += 16 )          insertionSort(arr,i,min(i+15,n-1));      for( int sz = 16; sz &lt; n ; sz += sz )          for( int i = 0 ; i &lt; n - sz ; i += sz+sz )              // &#x5BF9;&#x4E8E;arr[mid] &lt;= arr[mid+1]&#x7684;&#x60C5;&#x51B5;,&#x4E0D;&#x8FDB;&#x884C;merge              if( arr[i+sz-1] &gt; arr[i+sz] )                  __merge(arr, i, i+sz-1, min(i+sz+sz-1,n-1) );      // Merge Sort BU &#x4E5F;&#x662F;&#x4E00;&#x4E2A;O(nlogn)&#x590D;&#x6742;&#x5EA6;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x867D;&#x7136;&#x53EA;&#x4F7F;&#x7528;&#x4E24;&#x91CD;for&#x5FAA;&#x73AF;      // &#x6240;&#x4EE5;&#xFF0C;Merge Sort BU&#x4E5F;&#x53EF;&#x4EE5;&#x5728;1&#x79D2;&#x4E4B;&#x5185;&#x8F7B;&#x677E;&#x5904;&#x7406;100&#x4E07;&#x6570;&#x91CF;&#x7EA7;&#x7684;&#x6570;&#x636E;      // &#x6CE8;&#x610F;&#xFF1A;&#x4E0D;&#x8981;&#x8F7B;&#x6613;&#x6839;&#x636E;&#x5FAA;&#x73AF;&#x5C42;&#x6570;&#x6765;&#x5224;&#x65AD;&#x7B97;&#x6CD5;&#x7684;&#x590D;&#x6742;&#x5EA6;&#xFF0C;Merge Sort BU&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x53CD;&#x4F8B;      // &#x5173;&#x4E8E;&#x8FD9;&#x90E8;&#x5206;&#x9677;&#x9631;&#xFF0C;&#x63A8;&#x8350;&#x770B;&#xFF08;liubobo&#x8001;&#x5E08;&#xFF09;&#x7684;&#x300A;&#x73A9;&#x8F6C;&#x7B97;&#x6CD5;&#x9762;&#x8BD5;&#x300B;&#x8BFE;&#x7A0B;&#xFF0C;&#x7B2C;&#x4E8C;&#x7AE0;&#xFF1A;&#x300A;&#x9762;&#x8BD5;&#x4E2D;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x5206;&#x6790;&#x300B;&#xFF1A;&#xFF09;  &#125;  ```</pre></li></ul></li></ul><h2 class="mume-header" id="%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">&#x5FEB;&#x901F;&#x6392;&#x5E8F;</h2><ul><li><p>&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A; &#xFF08;&#x5206;&#x6CBB;&#xFF09; &#x5C06;&#x9009;&#x5B9A;&#x7684;&#x5143;&#x7D20;&#x653E;&#x5230;&#x5408;&#x9002;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x7136;&#x540E; &#x9012;&#x5F52; &#x6392;&#x5E8F; &#x88AB;&#x8BE5;&#x5143;&#x7D20;&#x5206;&#x5F00;&#x7684; &#x524D; &#x540E; &#x4E24;&#x4E2A;&#x5B50;&#x5E8F;&#x5217;&#x3002;(&#x5206;&#x51FA;&#x6765;&#x7684;&#x4E24;&#x4E2A;&#x5B50;&#x5E8F;&#x5217;&#x53EF;&#x80FD;&#x4E0D;&#x7B49;&#x957F;&#xFF0C;&#x76F8;&#x5DEE;&#x5F88;&#x5927;&#xFF0C;&#x4F1A;&#x5F71;&#x54CD;&#x6027;&#x80FD;)</p></li><li><p>&#x6838;&#x5FC3;&#x4EE3;&#x7801;&#x53C2;&#x8003;</p><pre class="language-text">```// &#x5BF9;arr[l...r]&#x90E8;&#x5206;&#x8FDB;&#x884C;partition&#x64CD;&#x4F5C;// &#x8FD4;&#x56DE;p, &#x4F7F;&#x5F97;arr[l...p-1] &lt; arr[p] ; arr[p+1...r] &gt; arr[p]template &lt;typename T&gt;int _partition(T arr[], int l, int r){    // &#x968F;&#x673A;&#x5728;arr[l...r]&#x7684;&#x8303;&#x56F4;&#x4E2D;, &#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x6570;&#x503C;&#x4F5C;&#x4E3A;&#x6807;&#x5B9A;&#x70B9;pivot    swap( arr[l] , arr[rand()%(r-l+1)+l] );    T v = arr[l];    int j = l;    for( int i = l + 1 ; i &lt;= r ; i ++ )        if( arr[i] &lt; v ){            j ++;            swap( arr[j] , arr[i] );        }    swap( arr[l] , arr[j]);    return j;}// &#x5BF9;arr[l...r]&#x90E8;&#x5206;&#x8FDB;&#x884C;&#x5FEB;&#x901F;&#x6392;&#x5E8F;template &lt;typename T&gt;void _quickSort(T arr[], int l, int r){    // &#x5BF9;&#x4E8E;&#x5C0F;&#x89C4;&#x6A21;&#x6570;&#x7EC4;, &#x4F7F;&#x7528;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x8FDB;&#x884C;&#x4F18;&#x5316;    if( r - l &lt;= 15 ){        insertionSort(arr,l,r);        return;    }    int p = _partition(arr, l, r);    _quickSort(arr, l, p-1 );    _quickSort(arr, p+1, r);}```</pre></li><li><p>&#x4F18;&#x5316;&#xFF1A;<br>1. &#x6807;&#x5B9A;&#x70B9; &#x968F;&#x673A;&#x9009;&#xFF08;&#x9488;&#x5BF9;&#x57FA;&#x672C;&#x6709;&#x5E8F;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x5982;&#x679C;&#x56FA;&#x5B9A;&#x9009;&#x6700;&#x524D;&#x9762;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5219;&#x5206;&#x6CBB;&#x7684;&#x4E24;&#x4E2A;&#x5B50;&#x95EE;&#x9898;&#x4E0D;&#x5E73;&#x8861;&#xFF0C;&#x9000;&#x5316;&#x4E3A;O(n^2)&#x7684;&#x590D;&#x6742;&#x5EA6;&#xFF09;<br>2. &#x5C0F;&#x89C4;&#x6A21;&#x6392;&#x5E8F;&#xFF0C;&#x4F7F;&#x7528;&#x63D2;&#x5165;&#x6392;&#x5E8F;</p></li><li><p>&#x53CC;&#x8DEF;&#x5FEB;&#x6392;</p><ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A;&#x9488;&#x5BF9;&#x952E;&#x503C;&#x91CD;&#x590D;&#x8FC7;&#x591A;&#x65F6;&#xFF0C;&#x5206;&#x6CBB;&#x7684;&#x4E24;&#x4E2A;&#x5B50;&#x5E8F;&#x5217;&#x4E0D;&#x7B49;&#x957F;&#xFF0C;&#x5BFC;&#x81F4;&#x5206;&#x6CBB;&#x4E0D;&#x5E73;&#x8861;</li><li>&#x6838;&#x5FC3;&#x4EE3;&#x7801;&#x53C2;&#x8003;<pre data-role="codeBlock" data-info class="language-"><code>// &#x53CC;&#x8DEF;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;partition// &#x8FD4;&#x56DE;p, &#x4F7F;&#x5F97;arr[l...p-1] &lt;= arr[p] ; arr[p+1...r] &gt;= arr[p]// &#x53CC;&#x8DEF;&#x5FEB;&#x6392;&#x5904;&#x7406;&#x7684;&#x5143;&#x7D20;&#x6B63;&#x597D;&#x7B49;&#x4E8E;arr[p]&#x7684;&#x65F6;&#x5019;&#x8981;&#x6CE8;&#x610F;&#xFF0C;&#x8BE6;&#x89C1;&#x4E0B;&#x9762;&#x7684;&#x6CE8;&#x91CA;&#xFF1A;&#xFF09;template &lt;typename T&gt;int _partition2(T arr[], int l, int r)&#123;    // &#x968F;&#x673A;&#x5728;arr[l...r]&#x7684;&#x8303;&#x56F4;&#x4E2D;, &#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x6570;&#x503C;&#x4F5C;&#x4E3A;&#x6807;&#x5B9A;&#x70B9;pivot    swap( arr[l] , arr[rand()%(r-l+1)+l] );    T v = arr[l];    // arr[l+1...i) &lt;= v; arr(j...r] &gt;= v    int i = l+1, j = r;    while( true )&#123;        // &#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x7684;&#x8FB9;&#x754C;, arr[i] &lt; v, &#x4E0D;&#x80FD;&#x662F;arr[i] &lt;= v        // &#x601D;&#x8003;&#x4E00;&#x4E0B;&#x4E3A;&#x4EC0;&#x4E48;?        while( i &lt;= r &amp;&amp; arr[i] &lt; v )            i ++;        // &#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x7684;&#x8FB9;&#x754C;, arr[j] &gt; v, &#x4E0D;&#x80FD;&#x662F;arr[j] &gt;= v        // &#x601D;&#x8003;&#x4E00;&#x4E0B;&#x4E3A;&#x4EC0;&#x4E48;?        while( j &gt;= l+1 &amp;&amp; arr[j] &gt; v )            j --;        // &#x5BF9;&#x4E8E;&#x4E0A;&#x9762;&#x7684;&#x4E24;&#x4E2A;&#x8FB9;&#x754C;&#x7684;&#x8BBE;&#x5B9A;, &#x6709;&#x7684;&#x540C;&#x5B66;&#x5728;&#x8BFE;&#x7A0B;&#x7684;&#x95EE;&#x7B54;&#x533A;&#x6709;&#x5F88;&#x597D;&#x7684;&#x56DE;&#x7B54;:)        // &#x5927;&#x5BB6;&#x53EF;&#x4EE5;&#x53C2;&#x8003;: http://coding.imooc.com/learn/questiondetail/4920.html        if( i &gt; j )            break;        swap( arr[i] , arr[j] );        i ++;        j --;    &#125;    swap( arr[l] , arr[j]);    return j;&#125;// &#x5BF9;arr[l...r]&#x90E8;&#x5206;&#x8FDB;&#x884C;&#x5FEB;&#x901F;&#x6392;&#x5E8F;template &lt;typename T&gt;void _quickSort(T arr[], int l, int r)&#123;    // &#x5BF9;&#x4E8E;&#x5C0F;&#x89C4;&#x6A21;&#x6570;&#x7EC4;, &#x4F7F;&#x7528;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x8FDB;&#x884C;&#x4F18;&#x5316;    if( r - l &lt;= 15 )&#123;        insertionSort(arr,l,r);        return;    &#125;    // &#x8C03;&#x7528;&#x53CC;&#x8DEF;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;partition    int p = _partition2(arr, l, r);    _quickSort(arr, l, p-1 );    _quickSort(arr, p+1, r);&#125;</code></pre></li></ul></li><li><p>&#x4E09;&#x8DEF;&#x5FEB;&#x6392;</p><ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A; &#x9488;&#x5BF9;2&#x8DEF;&#x5FEB;&#x6392;&#x7684;&#x52A0;&#x5F3A;&#xFF0C;&#x8FDB;&#x4E00;&#x6B65;&#x89E3;&#x51B3;&#x952E;&#x503C;&#x91CD;&#x590D;&#x8FC7;&#x591A;&#x7684;&#x95EE;&#x9898;&#xFF08;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x7B49;&#x503C;&#x533A;&#x57DF;&#xFF09;</li><li>&#x6838;&#x5FC3;&#x4EE3;&#x7801;&#x53C2;&#x8003;<pre data-role="codeBlock" data-info class="language-"><code>// &#x9012;&#x5F52;&#x7684;&#x4E09;&#x8DEF;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;template &lt;typename T&gt;void __quickSort3Ways(T arr[], int l, int r)&#123;    // &#x5BF9;&#x4E8E;&#x5C0F;&#x89C4;&#x6A21;&#x6570;&#x7EC4;, &#x4F7F;&#x7528;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x8FDB;&#x884C;&#x4F18;&#x5316;    if( r - l &lt;= 15 )&#123;        insertionSort(arr,l,r);        return;    &#125;    // &#x968F;&#x673A;&#x5728;arr[l...r]&#x7684;&#x8303;&#x56F4;&#x4E2D;, &#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x6570;&#x503C;&#x4F5C;&#x4E3A;&#x6807;&#x5B9A;&#x70B9;pivot    swap( arr[l], arr[rand()%(r-l+1)+l ] );    T v = arr[l];    int lt = l;     // arr[l+1...lt] &lt; v    int gt = r + 1; // arr[gt...r] &gt; v    int i = l+1;    // arr[lt+1...i) == v    while( i &lt; gt )&#123;        if( arr[i] &lt; v )&#123;            swap( arr[i], arr[lt+1]);            i ++;            lt ++;        &#125;        else if( arr[i] &gt; v )&#123;            swap( arr[i], arr[gt-1]);            gt --;        &#125;        else&#123; // arr[i] == v            i ++;        &#125;    &#125;    swap( arr[l] , arr[lt] );    __quickSort3Ways(arr, l, lt-1);    __quickSort3Ways(arr, gt, r);&#125;template &lt;typename T&gt;void quickSort3Ways(T arr[], int n)&#123;    srand(time(NULL));    __quickSort3Ways( arr, 0, n-1);&#125;// &#x6BD4;&#x8F83;Merge Sort&#x548C;&#x53CC;&#x8DEF;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x548C;&#x4E09;&#x8DEF;&#x5FEB;&#x6392;&#x4E09;&#x79CD;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x7684;&#x6027;&#x80FD;&#x6548;&#x7387;// &#x5BF9;&#x4E8E;&#x5305;&#x542B;&#x6709;&#x5927;&#x91CF;&#x91CD;&#x590D;&#x6570;&#x636E;&#x7684;&#x6570;&#x7EC4;, &#x4E09;&#x8DEF;&#x5FEB;&#x6392;&#x6709;&#x5DE8;&#x5927;&#x7684;&#x4F18;&#x52BF;// &#x5BF9;&#x4E8E;&#x4E00;&#x822C;&#x6027;&#x7684;&#x968F;&#x673A;&#x6570;&#x7EC4;&#x548C;&#x8FD1;&#x4E4E;&#x6709;&#x5E8F;&#x7684;&#x6570;&#x7EC4;, &#x4E09;&#x8DEF;&#x5FEB;&#x6392;&#x7684;&#x6548;&#x7387;&#x867D;&#x7136;&#x4E0D;&#x662F;&#x6700;&#x4F18;&#x7684;, &#x4F46;&#x662F;&#x662F;&#x5728;&#x975E;&#x5E38;&#x53EF;&#x4EE5;&#x63A5;&#x53D7;&#x7684;&#x8303;&#x56F4;&#x91CC;// &#x56E0;&#x6B64;, &#x5728;&#x4E00;&#x4E9B;&#x8BED;&#x8A00;&#x4E2D;, &#x4E09;&#x8DEF;&#x5FEB;&#x6392;&#x662F;&#x9ED8;&#x8BA4;&#x7684;&#x8BED;&#x8A00;&#x5E93;&#x51FD;&#x6570;&#x4E2D;&#x4F7F;&#x7528;&#x7684;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x3002;&#x6BD4;&#x5982;Java:)</code></pre></li></ul></li></ul><h2>&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x548C;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x884D;&#x751F;&#x7684;&#x95EE;&#x9898;</h2><pre class="language-text">* &#x6C42;&#x9006;&#x5E8F;&#x5BF9;&#xFF08;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#xFF09;* &#x6C42;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x7B2C;N&#x5927;&#x5143;&#x7D20;</pre><hr><h1 class="mume-header" id="%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%A0%86%E5%92%8C%E5%A0%86%E6%8E%92%E5%BA%8F">&#x7B2C;&#x56DB;&#x7AE0; &#x5806;&#x548C;&#x5806;&#x6392;&#x5E8F;</h1><h2 class="mume-header" id="%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E8%AE%A4%E8%AF%86">&#x57FA;&#x672C;&#x6982;&#x5FF5;&#x8BA4;&#x8BC6;</h2><ul><li>&#x961F;&#x5217;<ul><li>&#x666E;&#x901A;&#x961F;&#x5217;&#xFF1A;&#x5148;&#x8FDB;&#x5148;&#x51FA;</li><li>&#x4F18;&#x5148;&#x961F;&#x5217;&#xFF1A;&#x6839;&#x636E;&#x4F18;&#x5148;&#x7EA7;&#x51FA;&#x961F;</li></ul></li><li><strong>&#x4F18;&#x5148;&#x961F;&#x5217;&#x5E94;&#x7528;</strong>  &#x5BF9;&#x52A8;&#x6001;&#x7684;&#x6570;&#x636E;&#x6392;&#x5E8F;</li><li>&#x4F18;&#x5148;&#x961F;&#x5217;&#x7684;&#x4E09;&#x79CD;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;<table><thead><tr><th style="text-align:left">&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;</th><th style="text-align:left">&#x5165;&#x961F;</th><th style="text-align:left">&#x51FA;&#x961F;</th></tr></thead><tbody><tr><td style="text-align:left">&#x666E;&#x901A;&#x6570;&#x7EC4;</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(n)</td></tr><tr><td style="text-align:left">&#x987A;&#x5E8F;&#x6570;&#x7EC4;(&#x5143;&#x7D20;&#x6709;&#x5E8F;)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left">&#x5806;</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(log n)</td></tr></tbody></table></li></ul><h2 class="mume-header" id="%E5%A0%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AD%98%E5%82%A8">&#x5806;&#x7684;&#x57FA;&#x672C;&#x5B58;&#x50A8;</h2><pre class="language-text">* &#x7528;&#x6570;&#x7EC4;&#x5B58;&#x50A8;&#x4E8C;&#x53C9;&#x5806;* &#x6570;&#x7EC4;&#x7684;&#x7D22;&#x5F15;&#x6B21;&#x5E8F; &#x5BF9;&#x5E94; &#x4E8C;&#x53C9;&#x5806;&#x4E2D; &#x5C42;&#x5E8F;&#x904D;&#x5386;&#x6B21;&#x5E8F;* &#x5BF9;&#x4E8E;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;,&#x5BF9;&#x7B2C;i&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5176;&#x4E0E;&#x5176;&#x7236;&#xFF0C;&#x5176;&#x5B50;&#x7684;&#x5173;&#x7CFB;    * &#x6839;&#x8282;&#x70B9;&#x7D22;&#x5F15;&#x4ECE;0&#x5F00;&#x59CB;        * parent(i) = &#xFF08;i-1&#xFF09;/2        * left child (i) = 2*i +1        * right child (i) = 2*i + 2    * &#x6839;&#x8282;&#x70B9;&#x7D22;&#x5F15;&#x4ECE;1&#x5F00;&#x59CB;        * parent(i) = i/2        * left child (i) = 2*i         * right child (i) = 2*i + 1</pre><h3 class="mume-header" id="heapfy%E8%BF%87%E7%A8%8B%E5%A0%86%E7%9A%84%E5%BB%BA%E7%AB%8B">heapfy&#x8FC7;&#x7A0B;&#xFF08;&#x5806;&#x7684;&#x5EFA;&#x7ACB;&#xFF09;</h3><pre class="language-text">- &#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A;&#x4ECE;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x975E;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#xFF08;&#x7D22;&#x5F15;&#x4E3A;count/2&#xFF0C;&#x5728;&#x6839;&#x8282;&#x70B9;&#x7D22;&#x5F15;&#x4ECE;1&#x5F00;&#x59CB;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF09;&#x5F00;&#x59CB;&#xFF0C;shiftdown()&#xFF0C;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x5B9E;&#x73B0;&#x5806;- &#x5C06;n&#x4E2A;&#x5143;&#x7D20;&#x9010;&#x4E2A;&#x63D2;&#x5165;&#x7A7A;&#x5806;&#x4E2D;&#xFF0C;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(n log n),&#x800C;heapfy&#x8FC7;&#x7A0B;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;O(n)  - &#x4EE3;&#x7801;```    // &#x6784;&#x9020;&#x51FD;&#x6570;, &#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x7ED9;&#x5B9A;&#x6570;&#x7EC4;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x5806;    // &#x8BE5;&#x6784;&#x9020;&#x5806;&#x7684;&#x8FC7;&#x7A0B;, &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(n)    MaxHeap(Item arr[], int n){        data = new Item[n+1];        capacity = n;        for( int i = 0 ; i &lt; n ; i ++ )            data[i+1] = arr[i];        count = n;        for( int i = count/2 ; i &gt;= 1 ; i -- )            shiftDown(i);    }```</pre><h2 class="mume-header" id="shiftup%E8%8A%82%E7%82%B9%E4%B8%8A%E7%A7%BB%E6%AF%94%E8%BE%83">ShiftUp(&#x8282;&#x70B9;&#x4E0A;&#x79FB;&#x6BD4;&#x8F83;)</h2><pre class="language-text">- &#x4EE3;&#x7801;    ```        void shiftUp(int k){        while( k &gt; 1 &amp;&amp; data[k/2] &lt; data[k] ){            swap( data[k/2], data[k] );            k /= 2;        }        }    ``` </pre><h2 class="mume-header" id="shiftdown%E8%8A%82%E7%82%B9%E4%B8%8B%E7%A7%BB%E6%AF%94%E8%BE%83">ShiftDown&#xFF08;&#x8282;&#x70B9;&#x4E0B;&#x79FB;&#x6BD4;&#x8F83;&#xFF09;</h2><pre class="language-text">- &#x4EE3;&#x7801;```    void shiftDown(int k){    while( 2*k &lt;= count ){        int j = 2*k; // &#x5728;&#x6B64;&#x8F6E;&#x5FAA;&#x73AF;&#x4E2D;,data[k]&#x548C;data[j]&#x4EA4;&#x6362;&#x4F4D;&#x7F6E;        if( j+1 &lt;= count &amp;&amp; data[j+1] &gt; data[j] )            j ++;        // data[j] &#x662F; data[2*k]&#x548C;data[2*k+1]&#x4E2D;&#x7684;&#x6700;&#x5927;&#x503C;        if( data[k] &gt;= data[j] ) break;        swap( data[k] , data[j] );        k = j;    }    }```</pre><h2 class="mume-header" id="%E5%A0%86%E6%8E%92%E5%BA%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96">&#x5806;&#x6392;&#x5E8F;&#x53CA;&#x5176;&#x4F18;&#x5316;</h2><pre class="language-text">* &#x5806;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#xFF1A;    * &#x521B;&#x5EFA;&#x5806;&#xFF1A; &#x4E00;&#x79CD;&#x901A;&#x8FC7;&#x4E0D;&#x65AD;insert()&#x521B;&#x5EFA;O(nlogn)&#xFF0C;&#x4E00;&#x79CD;&#x4F20;&#x5165;&#x6570;&#x7EC4;&#x7528;heapfy&#x521B;&#x5EFA;O(n)    * &#x5806;&#x9876;&#x51FA;&#x5806;&#xFF1A; &#x5C06;&#x5806;&#x9876;&#x4E0E;&#x5806;&#x5C3E;&#x4E92;&#x6362;&#xFF0C;&#x5806;&#x7684;size-1,&#x5E76;&#x5C06;&#x65B0;&#x7684;&#x5806;&#x9876;&#xFF08;&#x539F;&#x5806;&#x5C3E;&#xFF09;shiftDown()    * &#x91CD;&#x590D;&#x7B2C;&#x4E8C;&#x6B65;  * &#x5806;&#x6392;&#x5E8F;&#x7684;&#x5B9E;&#x73B0;    1. &#x501F;&#x52A9;insert()&#x521B;&#x5EFA;&#x5806;    ```    // heapSort1, &#x5C06;&#x6240;&#x6709;&#x7684;&#x5143;&#x7D20;&#x4F9D;&#x6B21;&#x6DFB;&#x52A0;&#x5230;&#x5806;&#x4E2D;, &#x5728;&#x5C06;&#x6240;&#x6709;&#x5143;&#x7D20;&#x4ECE;&#x5806;&#x4E2D;&#x4F9D;&#x6B21;&#x53D6;&#x51FA;&#x6765;, &#x5373;&#x5B8C;&#x6210;&#x4E86;&#x6392;&#x5E8F;    // &#x65E0;&#x8BBA;&#x662F;&#x521B;&#x5EFA;&#x5806;&#x7684;&#x8FC7;&#x7A0B;, &#x8FD8;&#x662F;&#x4ECE;&#x5806;&#x4E2D;&#x4F9D;&#x6B21;&#x53D6;&#x51FA;&#x5143;&#x7D20;&#x7684;&#x8FC7;&#x7A0B;, &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5747;&#x4E3A;O(nlogn)    // &#x6574;&#x4E2A;&#x5806;&#x6392;&#x5E8F;&#x7684;&#x6574;&#x4F53;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(nlogn)    template&lt;typename T&gt;    void heapSort1(T arr[], int n){        MaxHeap&lt;T&gt; maxheap = MaxHeap&lt;T&gt;(n);        for( int i = 0 ; i &lt; n ; i ++ )            maxheap.insert(arr[i]);        for( int i = n-1 ; i &gt;= 0 ; i-- )            arr[i] = maxheap.extractMax();    }    2. &#x501F;&#x52A9;heapfy() &#x521B;&#x5EFA;&#x5806;    // heapSort2, &#x501F;&#x52A9;&#x6211;&#x4EEC;&#x7684;heapify&#x8FC7;&#x7A0B;&#x521B;&#x5EFA;&#x5806;    // &#x6B64;&#x65F6;, &#x521B;&#x5EFA;&#x5806;&#x7684;&#x8FC7;&#x7A0B;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(n), &#x5C06;&#x6240;&#x6709;&#x5143;&#x7D20;&#x4F9D;&#x6B21;&#x4ECE;&#x5806;&#x4E2D;&#x53D6;&#x51FA;&#x6765;, &#x5B9E;&#x8DF5;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(nlogn)    // &#x5806;&#x6392;&#x5E8F;&#x7684;&#x603B;&#x4F53;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4F9D;&#x7136;&#x662F;O(nlogn), &#x4F46;&#x662F;&#x6BD4;&#x4E0A;&#x8FF0;heapSort1&#x6027;&#x80FD;&#x66F4;&#x4F18;, &#x56E0;&#x4E3A;&#x521B;&#x5EFA;&#x5806;&#x7684;&#x6027;&#x80FD;&#x66F4;&#x4F18;    template&lt;typename T&gt;    void heapSort2(T arr[], int n){        MaxHeap&lt;T&gt; maxheap = MaxHeap&lt;T&gt;(arr,n);        for( int i = n-1 ; i &gt;= 0 ; i-- )            arr[i] = maxheap.extractMax();    }    ```* &#x5806;&#x7684;&#x5B9E;&#x73B0;&#x7EC6;&#x8282;    *ShiftUp&#x548C;ShiftDown&#x79CD;&#x4F7F;&#x7528;&#x590D;&#x5236;&#x64CD;&#x4F5C;&#x66FF;&#x6362;swap&#x64CD;&#x4F5C;*  </pre><h2 class="mume-header" id="%E7%B4%A2%E5%BC%95%E5%A0%86">&#x7D22;&#x5F15;&#x5806;</h2><ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A; &#x5206;&#x7D22;&#x5F15;&#x6570;&#x7EC4;&#x548C;&#x6570;&#x636E;&#x6570;&#x7EC4;&#xFF0C;&#x6570;&#x636E;&#x6570;&#x7EC4;&#x5B58;&#x6570;&#x636E;&#x5143;&#x7D20;&#x3002;&#x7D22;&#x5F15;&#x6570;&#x7EC4;&#x6309;&#x5806;&#x7684;&#x6B21;&#x5E8F;&#xFF08;&#x6BD4;&#x8F83;&#x7684;&#x662F;&#x5B9E;&#x9645;&#x5143;&#x7D20;&#x7684;&#x952E;&#x503C;&#xFF09;&#x5B58;&#x5BF9;&#x5E94;&#x8282;&#x70B9;&#x7684;&#x7D22;&#x5F15;&#xFF08;&#x5730;&#x5740;&#xFF09;&#x3002;ShiftUP&#x548C;ShiftDown&#x4E2D;&#x6BD4;&#x8F83;(&#x5B9E;&#x9645;&#x5143;&#x7D20;&#x7684;&#x503C;)&#xFF0C;&#x4EA4;&#x6362;&#x5BF9;&#x5E94;&#x7684;&#x7D22;&#x5F15;&#xFF08;&#x5B58;&#x50A8;&#x5730;&#x5740;&#xFF09;&#xFF0C;&#x800C;&#x4E0D;&#x4EA4;&#x6362;&#x5B9E;&#x9645;&#x7684;&#x5143;&#x7D20;&#x3002;</li><li>&#x4E00;&#x70B9;&#x7406;&#x89E3;&#xFF1A; &#x7EF4;&#x62A4;&#x4E86;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#xFF0C;&#x65E2;&#x80FD;&#x6709;&#x5806;&#x7684;&#x7279;&#x6027;&#xFF08;&#x53D6;&#x6700;&#x503C;&#xFF09;&#xFF0C;&#x53C8;&#x80FD;&#x4FDD;&#x6301;&#x539F;&#x6709;&#x6570;&#x7EC4;&#x7684;&#x5B58;&#x50A8;&#x6B21;&#x5E8F;&#xFF08;&#x6570;&#x636E;&#x6570;&#x7EC4;&#x7684;&#x7D22;&#x5F15;&#x662F;&#x539F;&#x6570;&#x7EC4;&#x7684;+1&#xFF09;&#x3002;</li><li>ShfitUp()<pre data-role="codeBlock" data-info class="language-"><code>    // &#x7D22;&#x5F15;&#x5806;&#x4E2D;, &#x6570;&#x636E;&#x4E4B;&#x95F4;&#x7684;&#x6BD4;&#x8F83;&#x6839;&#x636E;data&#x7684;&#x5927;&#x5C0F;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;, &#x4F46;&#x5B9E;&#x9645;&#x64CD;&#x4F5C;&#x7684;&#x662F;&#x7D22;&#x5F15;    void shiftUp( int k )&#123;    while( k &gt; 1 &amp;&amp; data[indexes[k/2]] &lt; data[indexes[k]] )&#123;        swap( indexes[k/2] , indexes[k] );        k /= 2;    &#125;&#125;</code></pre></li><li>ShiftDown()<pre data-role="codeBlock" data-info class="language-"><code>    // &#x7D22;&#x5F15;&#x5806;&#x4E2D;, &#x6570;&#x636E;&#x4E4B;&#x95F4;&#x7684;&#x6BD4;&#x8F83;&#x6839;&#x636E;data&#x7684;&#x5927;&#x5C0F;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;, &#x4F46;&#x5B9E;&#x9645;&#x64CD;&#x4F5C;&#x7684;&#x662F;&#x7D22;&#x5F15;    void shiftDown( int k )&#123;        while( 2*k &lt;= count )&#123;            int j = 2*k;            if( j + 1 &lt;= count &amp;&amp; data[indexes[j+1]] &gt; data[indexes[j]] )                j += 1;            if( data[indexes[k]] &gt;= data[indexes[j]] )                break;            swap( indexes[k] , indexes[j] );            k = j;        &#125;    &#125;</code></pre></li><li>&#x589E;&#x5220;&#x5B9E;&#x73B0; (<strong>&#x63D2;&#x5165;&#x64CD;&#x4F5C; &#x4E0D;&#x662F;&#x5F88;&#x7406;&#x89E3;</strong>)<pre data-role="codeBlock" data-info class="language-"><code>    // &#x5411;&#x6700;&#x5927;&#x7D22;&#x5F15;&#x5806;&#x4E2D;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x5143;&#x7D20;, &#x65B0;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;&#x4E3A;i, &#x5143;&#x7D20;&#x4E3A;item// &#x4F20;&#x5165;&#x7684;i&#x5BF9;&#x7528;&#x6237;&#x800C;&#x8A00;,&#x662F;&#x4ECE;0&#x7D22;&#x5F15;&#x7684;void insert(int i, Item item)&#123;    assert( count + 1 &lt;= capacity );    assert( i + 1 &gt;= 1 &amp;&amp; i + 1 &lt;= capacity );    i += 1;    data[i] = item;    indexes[count+1] = i;    count++;    shiftUp(count);&#125;// &#x4ECE;&#x6700;&#x5927;&#x7D22;&#x5F15;&#x5806;&#x4E2D;&#x53D6;&#x51FA;&#x5806;&#x9876;&#x5143;&#x7D20;, &#x5373;&#x7D22;&#x5F15;&#x5806;&#x4E2D;&#x6240;&#x5B58;&#x50A8;&#x7684;&#x6700;&#x5927;&#x6570;&#x636E;Item extractMax()&#123;    assert( count &gt; 0 );    Item ret = data[indexes[1]];    swap( indexes[1] , indexes[count] );    count--;    shiftDown(1);    return ret;&#125;</code></pre></li><li>&#x5E94;&#x7528;&#xFF1A; &#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;Prim&#x7B97;&#x6CD5;&#x4E2D;&#xFF0C;&#x7528;&#x6765;&#x7EF4;&#x62A4; &#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x5BF9;&#x5E94;&#x7684;&#x6700;&#x5C0F;&#x6A2A;&#x5207;&#x9762;&#x7684;&#x6743;&#x91CD;&#x3010;&#x540C;&#x65F6;&#x80FD;&#x8F93;&#x51FA;&#x5F53;&#x524D;&#x6240;&#x6709;&#x8282;&#x70B9;&#x6700;&#x5C0F;&#x6A2A;&#x5207;&#x9762;&#x4E2D;&#x7684;&#x6700;&#x5C0F;&#x6A2A;&#x5207;&#x9762;&#x3011;</li></ul><h2 class="mume-header" id="%E6%B6%89%E5%8F%8A%E5%A0%86-%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98">&#x6D89;&#x53CA;&#x5806; &#x7684;&#x76F8;&#x5173;&#x95EE;&#x9898;</h2><pre class="language-text">- &#x591A;&#x8DEF;&#x5F52;&#x5E76;&#x6392;&#x5E8F; &#x591A;&#x4E2A;&#x5143;&#x7D20;&#x540C;&#x65F6;&#x6BD4;&#x8F83;&#x7684;&#x65F6;&#x5019;&#x7528;&#xFF0C;&#x6700;&#x5C0F;&#xFF08;&#x5927;&#xFF09;&#x5806;- d&#x53C9;&#x5806; d-ary heap  - &#x6700;&#x5927;&#x6700;&#x5C0F;&#x961F;&#x5217; &#xFF08;&#x6700;&#x5927;&#x5806;&#x548C;&#x6700;&#x5C0F;&#x5806;&#x540C;&#x65F6;&#x7EF4;&#x62A4;&#xFF1F;&#xFF1F;&#xFF09;- &#x4E8C;&#x9879;&#x5806;- &#x6590;&#x6CE2;&#x90A3;&#x5951;&#x5806;</pre><h2 class="mume-header" id="%E6%A1%B6%E6%8E%92%E5%BA%8F">&#x6876;&#x6392;&#x5E8F;</h2><pre class="language-text">&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A; &#x5206;&#x914D; + &#x6536;&#x96C6; &#xFF08;&#x5148;&#x6392;&#x5E8F;&#x4F4E;&#x4F4D;&#x518D;&#x6392;&#x5E8F;&#x9AD8;&#x4F4D;&#xFF09;</pre><h2 class="mume-header" id="%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93">&#x6392;&#x5E8F;&#x603B;&#x7ED3;</h2><table><thead><tr><th style="text-align:left">&#x6392;&#x5E8F;</th><th style="text-align:left">&#x5E73;&#x5747;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;</th><th style="text-align:left">&#x539F;&#x5730;&#x6392;&#x5E8F;</th><th style="text-align:left">&#x989D;&#x5916;&#x7A7A;&#x95F4;</th><th style="text-align:left">&#x7A33;&#x5B9A;&#x6392;&#x5E8F;</th></tr></thead><tbody><tr><td style="text-align:left">&#x63D2;&#x5165;&#x6392;&#x5E8F;&#xFF08;Insertion Sort&#xFF09;</td><td style="text-align:left">O(n^2)</td><td style="text-align:left">&#x662F;</td><td style="text-align:left">O(1)</td><td style="text-align:left">&#x662F;</td></tr><tr><td style="text-align:left">&#x5F52;&#x5E76;&#x6392;&#x5E8F;(Merge Sort)</td><td style="text-align:left">O&#xFF08;nlogn&#xFF09;</td><td style="text-align:left">&#x5426;</td><td style="text-align:left">O(n)</td><td style="text-align:left">&#x662F;</td></tr><tr><td style="text-align:left">&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#xFF08;Quick Sort&#xFF09;</td><td style="text-align:left">O(nlogn)</td><td style="text-align:left">&#x662F;</td><td style="text-align:left"><strong>O&#xFF08;logn&#xFF09;</strong></td><td style="text-align:left">&#x5426;</td></tr><tr><td style="text-align:left">&#x5806;&#x6392;&#x5E8F;&#xFF08;Heap Sort)</td><td style="text-align:left">O(nlogn)</td><td style="text-align:left">&#x662F;</td><td style="text-align:left">O(1)</td><td style="text-align:left">&#x5426;</td></tr></tbody></table><ul><li><strong>&#x4E0D;&#x540C;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x7684;&#x9009;&#x62E9;</strong><ul><li>n&#x8F83;&#x5C0F;&#xFF1A;&#x76F4;&#x63A5;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x6216;&#x76F4;&#x63A5;&#x9009;&#x62E9;&#x6392;&#x5E8F;</li><li>&#x57FA;&#x672C;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#xFF0C;&#x76F4;&#x63A5;&#x63D2;&#x5165;&#xFF0C;&#x5192;&#x6CE1;&#xFF0C;&#x968F;&#x673A;&#x7684;&#x5FEB;&#x901F;&#x6392;&#x5E8F;</li><li>n&#x8F83;&#x5927;&#xFF0C;&#x5E94;&#x9009;&#x590D;&#x6742;&#x5EA6;&#x597D;&#x7684;&#xFF1A;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#xFF0C;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#xFF0C; &#x5806;&#x6392;&#x5E8F;&#x3002;<ul><li>&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x6027;&#x80FD;&#x5E73;&#x5747;&#x6700;&#x597D;&#xFF0C;&#x5806;&#x6392;&#x5E8F;&#x66F4;&#x5C11;&#x7684;&#x8F85;&#x52A9;&#x7A7A;&#x95F4;&#xFF0C;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x662F;&#x7A33;&#x5B9A;&#x7684;&#x6392;&#x5E8F;&#x3002;&#xFF08;&#x5F53;&#x6392;&#x5E8F;&#x6570;&#x5C11;&#x4E8E;&#x4E00;&#x5B9A;&#x65F6;&#x5982;16&#xFF0C;<strong>&#x8C03;&#x7528;&#x76F4;&#x63A5;&#x63D2;&#x5165;&#x6392;&#x5E8F;</strong>&#xFF09;</li></ul></li></ul></li></ul><p><strong>&#x5176;&#x4ED6;&#x53C2;&#x8003;</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMjIyOTk3LWIxYmIwNDg4NDlhMjI3YmUucG5n?x-oss-process=image/format,png" alt="&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x603B;&#x7ED3;"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cucnVub29iLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxOS8wMy9zb3J0LnBuZw?x-oss-process=image/format,png" alt="&#x6392;&#x5E8F;&#x5BF9;&#x6BD4;"><br><img src="https://img-blog.csdn.net/2018101109461342?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pocTExODY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br><a href="https://blog.csdn.net/liu17234050/article/details/104217658">C&#x8BED;&#x8A00;&#x4E2D;&#x7684;14&#x79CD;&#x6392;&#x5E8F;</a><br><a href="https://v.qq.com/x/page/e0523qakza6.html">14&#x4E2D;&#x6392;&#x5E8F;&#x52A8;&#x753B;&#x6F14;&#x793A;</a></p><hr><h1 class="mume-header" id="%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%A0%91">&#x7B2C;&#x4E94;&#x7AE0; &#x4E8C;&#x5206;&#x641C;&#x7D22;&#x6811;</h1><h2 class="mume-header" id="5-1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95">5-1 &#x4E8C;&#x5206;&#x67E5;&#x627E;&#x6CD5;</h2><ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A; &#xFF08;&#x9012;&#x5F52;&#x5206;&#x6CBB;&#xFF09;&#x5BF9;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x9010;&#x4E00;&#x6BD4;&#x8F83;&#xFF0C;&#x53EA;&#x8981;&#x6BD4;&#x8F83;&#x4E2D;&#x95F4;&#x503C;&#xFF0C;&#x7136;&#x540E;&#x786E;&#x5B9A;&#x76EE;&#x6807;&#x503C;&#x7684;&#x53EF;&#x80FD;&#x533A;&#x57DF;&#xFF0C;&#x518D;&#x5728;&#x53EF;&#x80FD;&#x533A;&#x57DF;&#x9012;&#x5F52;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x3002;</li><li>&#x7EC6;&#x8282;&#xFF1A;<ol><li>&#x8BA1;&#x7B97;&#x4E2D;&#x95F4;&#x503C;&#x65F6;&#xFF0C; &#x6CE8;&#x610F;&#x9632;&#x6B62;&#x8D8A;&#x754C;&#xFF08;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x7684;&#x8303;&#x56F4;&#xFF09;&#x3002;<ul><li>&#x5408;&#x7406;&#x5199;&#x6CD5;&#xFF1A; int mid = left + (right-left)/2 &#xFF0C;</li><li>&#x5371;&#x9669;&#x5199;&#x6CD5;&#xFF1A; int mid = (left + right)/2</li></ul></li><li>&#x4E8C;&#x5206;&#x67E5;&#x627E;&#x8FD4;&#x56DE;&#x7684;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x7D22;&#x5F15;&#xFF0C;&#x800C;&#x5E8F;&#x5217;&#x4E2D;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x91CD;&#x590D;&#x503C;&#x3002;&#x5982;&#x4F55;&#x8FD4;&#x56DE;&#x6240;&#x6709;&#x91CD;&#x590D;&#x503C;&#xFF1F;<ul><li>&#x7EC3;&#x4E60;&#xFF1A;&#x5BF9;&#x4E8E;&#x5B58;&#x5728;&#x91CD;&#x590D;&#x503C;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x8FD4;&#x56DE;&#x76EE;&#x6807;&#x503C;&#x7D22;&#x5F15;&#x7684;floor(&#x7B2C;&#x4E00;&#x4E2A;&#x7D22;&#x5F15;)&#x548C;ceil&#xFF08;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x7D22;&#x5F15;&#xFF09;</li></ul></li></ol></li><li>&#x6539;&#x8FDB;&#xFF1A;&#xFF08;&#x9009;&#x4E0D;&#x540C;&#x7684;&#x5206;&#x5272;&#x70B9;&#xFF09;<ul><li>&#x63D2;&#x503C;&#x67E5;&#x627E; &#xFF08;&#x6309;&#x6BD4;&#x503C;&#x5206;&#x5272;&#xFF09;<ul><li>mid = left + (right-left)*{(key-a[left])/(a[right]-a[left])}</li></ul></li><li>&#x6590;&#x6CE2;&#x90A3;&#x5951;&#x67E5;&#x627E;<ul><li>mid = left + F_block - 1 (&#x9EC4;&#x91D1;&#x5206;&#x5272;)</li></ul></li></ul></li></ul><h2 class="mume-header" id="5-2-%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%A0%91">5-2 &#x4E8C;&#x5206;&#x641C;&#x7D22;&#x6811;</h2><ul><li><p>&#x4E8C;&#x5206;&#x641C;&#x7D22;&#x6811;&#x7684;&#x5B9A;&#x4E49;&#xFF1A;</p><ul><li>&#x5DE6;&#x5B50;&#x6811;&gt;(&lt;) &#x6839; &gt;(&lt;) &#x53F3;&#x5B50;&#x6811; [&#x4E00;&#x822C;&#x4E0D;&#x8003;&#x8651;&#x952E;&#x503C;&#x91CD;&#x590D;&#x7684;&#x95EE;&#x9898;]</li></ul></li><li><p>&#x4E8C;&#x5206;&#x641C;&#x7D22;&#x6811;&#x7684;&#x4F18;&#x52BF;</p><ul><li>&#x9AD8;&#x6548;(&#xFF08;O(nlogn))&#x7684;&#x7EF4;&#x62A4;&#x6570;&#x636E;&#x7684;&#x6709;&#x5E8F;&#x6027;&#xFF1A;min,max,floor,ceil,rank,select</li></ul></li><li><p>&#x4E8C;&#x5206;&#x641C;&#x7D22;&#x6811;&#x7684;&#x8282;&#x70B9;&#x63D2;&#x5165;</p><ul><li>&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#xFF1A;<ol><li>&#x9012;&#x5F52;(&#x8FD4;&#x56DE;&#x5B50;&#x6811;&#x6839;&#x8282;&#x70B9;)[&#x4ECE;&#x6839;&#x8282;&#x70B9;&#x5F00;&#x59CB;&#x641C;&#x7D22;&#xFF0C;&#x627E;&#x5230;key&#x503C;&#x5219;&#x66FF;&#x6362;&#xFF0C;&#x672A;&#x627E;&#x5230;&#x5219;&#x6839;&#x636E;&#x6BD4;&#x8F83;&#x5173;&#x7CFB;&#x9012;&#x5F52;&#x5B50;&#x6811;]</li></ol><pre data-role="codeBlock" data-info="Cpp" class="language-cpp">    <span class="token comment">// &#x5411;&#x4EE5;node&#x4E3A;&#x6839;&#x7684;&#x4E8C;&#x5206;&#x641C;&#x7D22;&#x6811;&#x4E2D;, &#x63D2;&#x5165;&#x8282;&#x70B9;(key, value), &#x4F7F;&#x7528;&#x9012;&#x5F52;&#x7B97;&#x6CD5;</span>    <span class="token comment">// &#x8FD4;&#x56DE;&#x63D2;&#x5165;&#x65B0;&#x8282;&#x70B9;&#x540E;&#x7684;&#x4E8C;&#x5206;&#x641C;&#x7D22;&#x6811;&#x7684;&#x6839;</span>    <span class="token keyword">private</span> Node <span class="token function">insert</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span>\<span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> node <span class="token operator">==</span> null <span class="token punctuation">)</span><span class="token punctuation">{</span>            count <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>            node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span> node<span class="token punctuation">.</span>left <span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>    <span class="token comment">// key &gt; node-&gt;key</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span> node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span></pre><ol start="2"><li>&#x8FED;&#x4EE3;<ul><li>&#x5F53;&#x4F5C;&#x7EC3;&#x4E60;</li></ul></li></ol></li></ul></li><li><p>&#x4E8C;&#x5206;&#x641C;&#x7D22;&#x4E66;&#x7684;&#x67E5;&#x627E;</p><ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3;: &#x4E8C;&#x5206;&#x67E5;&#x627E;</li></ul></li><li><p>&#x4E8C;&#x5206;&#x641C;&#x7D22;&#x6811;&#x7684;&#x904D;&#x5386;</p><ul><li>&#xFF08;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#xFF09;<ul><li>&#x524D;&#x5E8F;&#x904D;&#x5386;&#xFF0C;&#x4E2D;&#x5E8F;&#x904D;&#x5386;&#xFF0C;&#x540E;&#x5E8F;&#x904D;&#x5386;</li></ul></li><li>&#xFF08;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#xFF09;<ul><li>&#x5C42;&#x5E8F;&#x904D;&#x5386;</li></ul></li></ul></li><li><p>&#x5220;&#x9664;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x6700;&#x5C0F;&#x503C;</p><ul><li>&#x5B9E;&#x73B0;&#xFF1A;<ul><li>&#x9012;&#x5F52;&#xFF1A;&#xFF08;&#x4E0D;&#x65AD;&#x9012;&#x5F52;(&#x5DE6;/&#x53F3;)&#x5B50;&#x6811;&#xFF0C;&#x76F4;&#x5230;&#x8282;&#x70B9;&#x6CA1;&#x6709;&#xFF08;&#x5DE6;/&#x53F3;&#xFF09;&#x5B50;&#x6811;&#xFF0C;&#x5220;&#x9664;&#x8BE5;&#x8282;&#x70B9;&#xFF0C;&#x8FD4;&#x56DE;&#x5176;&#x7684;&#xFF08;&#x53F3;/&#x5DE6;&#xFF09;&#x5B50;&#x6811;&#x8D4B;&#x503C;&#x7ED9;&#x4E0A;&#x4E00;&#x8282;&#x70B9;&#x7684;&#xFF08;&#x5DE6;/&#x53F3;&#xFF09;&#x5B50;&#x6811;&#xFF09;</li></ul></li></ul></li><li><p>&#x5220;&#x9664;Key&#x5BF9;&#x5E94;&#x7684;&#x8282;&#x70B9;</p><ul><li>&#x5B9E;&#x73B0;&#xFF1A;<ul><li>&#x9012;&#x5F52;<ul><li>&#x4ECE;&#x6839;&#x8282;&#x70B9;&#x5F00;&#x59CB;&#x9012;&#x5F52;&#x641C;&#x7D22;<ul><li>&#x5982;&#x679C;&#x76EE;&#x6807;&#x503C;&#x5728;&#x6839;&#x8282;&#x70B9;&#x5219;&#x5220;&#x9664;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x9009;&#x65B0;&#x7684;&#x4E2D;&#x95F4;&#x503C;&#x4E0A;&#x4F4D;&#xFF08;&#x5DE6;&#x5B50;&#x6811;&#x6700;&#x53F3;&#xFF08;&#x5927;/&#x5C0F;&#xFF09;&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x53F3;&#x5B50;&#x6811;&#x6700;&#x5DE6;&#xFF08;&#x5C0F;/&#x5927;&#xFF09;&#x7684;&#x8282;&#x70B9;&#xFF09;</li><li>&#x5426;&#x5219;&#x6839;&#x636E;&#x6BD4;&#x8F83;&#x6B21;&#x5E8F;&#xFF0C;&#x9009;&#x62E9;&#xFF08;&#x5DE6;/&#x53F3;&#xFF09;&#x5B50;&#x6811;&#x9012;&#x5F52;&#x641C;&#x7D22;&#xFF0C;&#x6839;&#x8282;&#x70B9;&#x7684;&#xFF08;&#x5DE6;/&#x53F3;&#xFF09;&#x5B50;&#x6811; = &#x8FD4;&#x56DE;&#x5220;&#x9664;&#x6700;&#x503C;&#x540E;&#x7684;&#x5B50;&#x6811;&#x7684;&#x6839;&#x8282;&#x70B9;</li></ul></li></ul></li></ul></li></ul></li></ul><h2 class="mume-header" id="5-3-%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%89%B9%E6%80%A7">5-3 &#x4E8C;&#x5206;&#x641C;&#x7D22;&#x6811;&#x7684;&#x7279;&#x6027;</h2><ul><li><p>&#x987A;&#x5E8F;&#x6027;</p><ul><li>minimum/maximum</li><li>successor/predecessor &#x540E;&#x7EE7;/&#x524D;&#x7EE7;</li><li>floor/ceil &#xFF08;&#x5B58;&#x5728;&#x952E;&#x503C;&#x91CD;&#x590D;&#x65F6;&#xFF0C;&#x7D22;&#x5F15;&#x7684;&#x8303;&#x56F4;&#xFF09;</li><li>rank/select &#x5DF2;&#x77E5;key&#x83B7;&#x53D6;&#x6392;&#x540D;/&#x5DF2;&#x77E5;&#x6392;&#x540D;&#x83B7;&#x53D6;key,value</li></ul></li><li><p>&#x5C40;&#x9650;&#x6027;&#xFF1A;(&#x4E0D;&#x5E73;&#x8861;) &#x4F9D;&#x7167;&#x987A;&#x5E8F;&#x6216;&#x9006;&#x5E8F;&#x63D2;&#x5165;&#x5143;&#x7D20;&#xFF0C;&#x4E8C;&#x5206;&#x641C;&#x7D22;&#x6811;&#x9000;&#x5316;&#x4E3A;&#x94FE;&#x8868;&#xFF08;&#x8DDF;&#x8282;&#x70B9;&#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5728;&#x6700;&#x5DE6;&#xFF0C;&#x6216;&#x6700;&#x53F3;&#xFF09;&#x3002;</p></li><li><p>&#x652F;&#x6301;&#x91CD;&#x590D;&#x952E;&#x503C;&#x7684;&#x4E8C;&#x5206;&#x641C;&#x7D22;&#x6811;</p><ul><li>&#x601D;&#x8DEF;&#x4E00;&#xFF1A; &#x8BA9;&#x952E;&#x503C;&#x91CD;&#x590D;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x6216;&#x5DE6;&#x5B50;&#x6811;&#x5305;&#x542B;&#x952E;&#x503C;&#x91CD;&#x590D;&#x7684;&#x8282;&#x70B9;&#x3002;</li><li>&#x601D;&#x8DEF;&#x4E8C;&#xFF1A; &#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x533A;&#x57DF;&#xFF08;&#x94FE;&#x8868;&#x6216;&#x6570;&#x7EC4;&#xFF09;&#xFF0C;&#x5B58;&#x952E;&#x503C;&#x76F8;&#x7B49;&#x7684;&#x5143;&#x7D20;</li></ul></li></ul><h2 class="mume-header" id="%E4%BA%8C%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%A0%91">&#x4E8C;&#x53C9;&#x5E73;&#x8861;&#x6811;</h2><pre class="language-text">- &#x5E73;&#x8861;&#x4E8C;&#x53C9;&#x6811;&#xFF1A;    - &#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x9AD8;&#x5EA6;&#x5DEE;&#x4E0D;&#x8D85;&#x8FC7;1&#x7684;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#xFF0C;&#x5373;&#x5E73;&#x8861;&#x4E8C;&#x53C9;&#x6811;&#x6240;&#x6709;&#x7ED3;&#x70B9;&#x7684;&#x5E73;&#x8861;&#x56E0;&#x5B50;&#x7EDD;&#x5BF9;&#x503C;&#x4E0D;&#x8D85;&#x8FC7;1&#xFF08;&#x5E73;&#x8861;&#x56E0;&#x5B50; = &#x7ED3;&#x70B9;&#x5DE6;&#x5B50;&#x6811;&#x7684;&#x9AD8;&#x5EA6; - &#x7ED3;&#x70B9;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x9AD8;&#x5EA6;&#xFF09;&#x3002;- &#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#xFF1A;    - AVL&#x6811;    - &#x7EA2;&#x9ED1;&#x6811;    - 2-3&#x6811;    - Splay&#x6811;</pre><h2 class="mume-header" id="avl-%E6%A0%91">AVL &#x6811;</h2><ul><li><p>&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF0C;&#x6BCF;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x81EA;&#x5E95;&#x5411;&#x4E0A;&#x7EF4;&#x62A4;&#x6811;&#x7684;&#x5E73;&#x8861;&#xFF0C;&#x4EE5;&#x53CA;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x5E73;&#x8861;&#x56E0;&#x5B50;</p></li><li><p>&#x5E73;&#x8861;&#x8C03;&#x6574;&#x7684;&#x56DB;&#x79CD;&#x7C7B;&#x578B;&#xFF1A;</p><ul><li>LL&#x578B; &#x53F3;&#x65CB;&#x8C03;&#x6574; &#x8C03;&#x6574;&#x540E;&#x6D89;&#x53CA;&#x5230;&#x7684;&#x8282;&#x70B9;&#x7684;&#x5E73;&#x8861;&#x56E0;&#x5B50;&#xFF08;bf&#xFF09;&#x5747;&#x4E3A;0</li><li>RR&#x578B; &#x5DE6;&#x65CB;&#x8C03;&#x6574; &#x8C03;&#x6574;&#x540E;&#x6D89;&#x53CA;&#x5230;&#x7684;&#x8282;&#x70B9;&#x7684;&#x5E73;&#x8861;&#x56E0;&#x5B50;(bf)&#x5747;&#x4E3A;0</li><li>LR&#x578B; &#x5148;&#x5DE6;&#x65CB;&#x8C03;&#x6574;&#x81F3;LL&#x578B;&#xFF0C; &#x7136;&#x540E;&#x53F3;&#x65CB;&#x8C03;&#x6574; bf&#x7684;&#x7EF4;&#x62A4;&#x5982;&#x4E0B;&#xFF1A;</li><li>RL&#x578B; &#x5148;&#x53F3;&#x65CB;&#x8C03;&#x6574;&#x81F3;RR&#x578B;&#xFF0C; &#x7136;&#x540E;&#x5DE6;&#x65CB;&#x8C03;&#x6574;<br><img src="..\pictures\%E5%B9%B3%E8%A1%A1%E8%B0%83%E6%95%B4%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%B1%BB%E5%9E%8B.bmp" alt></li></ul></li><li><p>&#x63D2;&#x5165;&#x64CD;&#x4F5C;&#x601D;&#x8DEF;&#x6574;&#x7406;&#xFF1A;</p><ul><li>&#x8003;&#x8651;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x5B50;&#x6811;&#x662F;&#x5426;&#x6DFB;&#x52A0;&#x4E86;&#x65B0;&#x8282;&#x70B9;<ul><li>&#x6CA1;&#x6709; &#x5219;&#x4E0D;&#x7528;&#x7EF4;&#x62A4;&#xFF0C;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;</li><li>&#x5DE6;&#x5B50;&#x6811;&#x6DFB;&#x52A0;&#x4E86;&#x65B0;&#x8282;&#x70B9; <strong>&gt;&gt;&gt;</strong> &#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x5E73;&#x8861;&#x56E0;&#x5B50;&#x8981;&#x52A0;&#x4E00;(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>f</mi><mo>=</mo><mi>b</mi><mi>f</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">bf= bf+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>)<ul><li>&#x82E5;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>f</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">bf&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>(&#x9700;&#x8981;&#x5E73;&#x8861;&#x8C03;&#x6574;) <strong>&gt;&gt;&gt;</strong> &#x8FDB;&#x884C;&#x5DE6;&#x5E73;&#x8861;&#x8C03;&#x6574;</li></ul></li><li>&#x53F3;&#x5B50;&#x6811;&#x6DFB;&#x52A0;&#x4E86;&#x65B0;&#x8282;&#x70B9; <strong>&gt;&gt;&gt;</strong> &#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x5E73;&#x8861;&#x56E0;&#x5B50;&#x8981;&#x51CF;&#x4E00;(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>f</mi><mo>=</mo><mi>b</mi><mi>f</mi><mo>&#x2212;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">bf = bf -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">&#x2212;</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>)<ul><li>&#x82E5;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>f</mi><mo>&lt;</mo><mo>&#x2212;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">bf&lt;-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">&#x2212;</span><span class="mord">1</span></span></span></span>&#xFF0C;&#x9700;&#x8981;&#x5E73;&#x8861;&#x8C03;&#x6574; <strong>&gt;&gt;&gt;</strong> &#x8FDB;&#x884C;&#x53F3;&#x5E73;&#x8861;&#x8C03;&#x6574;</li></ul></li></ul></li></ul></li><li><p>&#x5DE6;&#x5E73;&#x8861;&#x8C03;&#x6574;(<a href="http://cur.bf">cur.bf</a> &gt; 1)</p><ul><li>&#x770B;cur&#x7684;&#x5DE6;&#x5B50;&#x8282;&#x70B9;L &#x7684;&#x5E73;&#x8861;&#x56E0;&#x5B50; <a href="http://L.bf">L.bf</a><ul><li><a href="http://L.bf">L.bf</a> == 1 <strong>&gt;&gt;&gt;</strong> LL&#x578B; <strong>&gt;&gt;&gt;</strong> &#x53F3;&#x65CB;&#x64CD;&#x4F5C;</li><li><a href="http://L.bf">L.bf</a> == -1 <strong>&gt;&gt;&gt;</strong> LR&#x578B; <strong>&gt;&gt;&gt;</strong> &#x5148;&#x5DE6;&#x65CB;&#x8C03;&#x6574;&#x81F3;LL&#x578B;&#xFF0C;&#x7136;&#x540E;&#x53F3;&#x65CB;&#x8C03;&#x6574;</li></ul></li></ul></li><li><p>&#x53F3;&#x5E73;&#x8861;&#x8C03;&#x6574;(<a href="http://cur.bf">cur.bf</a> &lt; -1)</p><ul><li>&#x770B;cur&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#x8282;&#x70B9;R <a href="http://xn--R-td0b79kzzdet5b8nw.bf">&#x7684;&#x5E73;&#x8861;&#x56E0;&#x5B50;R.bf</a><ul><li><a href="http://R.bf">R.bf</a> == -1 <strong>&gt;&gt;&gt;</strong> RR&#x578B; <strong>&gt;&gt;&gt;</strong> &#x5DE6;&#x65CB;&#x64CD;&#x4F5C;</li><li><a href="http://R.bf">R.bf</a> == 1 <strong>&gt;&gt;&gt;</strong> RL&#x578B; <strong>&gt;&gt;&gt;</strong> &#x5148;&#x53F3;&#x65CB;&#x8C03;&#x6574;&#x81F3;RR&#x578B;&#xFF0C;&#x7136;&#x540E;&#x5DE6;&#x65CB;&#x8C03;&#x6574;</li></ul></li></ul></li><li><p>&#x63D2;&#x5165;&#x64CD;&#x4F5C;&#x4EE3;&#x7801;</p></li></ul><pre data-role="codeBlock" data-info="Java" class="language-java"><span class="token comment">//&#x63D2;&#x5165;&#x64CD;&#x4F5C;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>taller <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//&#x589E;&#x52A0;&#x4E86;&#x65B0;&#x7684;&#x4E00;&#x5C42;&#xFF1F;&#xFF1F;</span>root <span class="token operator">=</span> <span class="token function">__insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//&#x8FD4;&#x56DE;&#x63D2;&#x5165;&#x65B0;&#x8282;&#x70B9;&#x540E;&#x7684;&#x6839;&#x8282;&#x70B9;</span><span class="token keyword">private</span> <span class="token class-name">AVLNode</span> <span class="token function">__insert</span><span class="token punctuation">(</span><span class="token class-name">AVLNode</span> curNode<span class="token punctuation">,</span><span class="token class-name">K</span> key<span class="token punctuation">,</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>curNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>curNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AVLNode</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>taller <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//&#x589E;&#x52A0;&#x4E86;&#x65B0;&#x8282;&#x70B9;</span><span class="token keyword">return</span> curNode<span class="token punctuation">;</span><span class="token comment">//</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> curNode<span class="token punctuation">;</span><span class="token comment">//&#x8282;&#x70B9;&#x5DF2;&#x7ECF;&#x5B58;&#x5728;&#xFF0C;&#x8FD4;&#x56DE;&#xFF08;&#x4E0D;&#x8986;&#x76D6;&#x65E7;&#x503C;&#xFF09;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>curNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">__insert</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#x5F80;&#x5DE6;&#x5B50;&#x6811;&#x65B0;&#x589E;&#x8282;&#x70B9;</span><span class="token keyword">if</span><span class="token punctuation">(</span>taller<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//&#x589E;&#x52A0;&#x4E86;&#x65B0;&#x8282;&#x70B9;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>bf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token comment">//&#x65B0;&#x589E;&#x8282;&#x70B9;&#x6CA1;&#x6709;&#x6253;&#x7834;&#x5E73;&#x8861;&#xFF0C;&#x4F46;bf+1</span>curNode<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//&#x5DE6;&#x8FB9;&#x65B0;&#x52A0;&#x4E00;&#x4E2A;&#x70B9;</span>taller <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//&#x6B64;&#x5904;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x81EA;&#x5E95; &#x5411;&#x4E0A;&#x4F20;&#x9012;&#x5E73;&#x8861;&#x4FE1;&#x606F;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>  <span class="token comment">//&#x672C;&#x6765;&#x5DE6;&#x5B50;&#x6811;&#x591A;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#xFF0C;&#x7136;&#x540E;taller&#x4E3A;true,&#x5DE6;&#x5B50;&#x6811;&#x53C8;&#x589E;&#x52A0;&#x4E86;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;</span>curNode <span class="token operator">=</span> <span class="token function">leftBalance</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#x5DE6;&#x5E73;&#x8861;&#x65F6;&#x5FC5;&#x987B;&#x4FDD;&#x8BC1; curNode&#x5177;&#x6709;&#x5DE6;&#x5B69;&#x5B50;</span>taller <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//&#x5DE6;&#x5E73;&#x8861;&#x540E; &#x8FBE;&#x5230;&#x5E73;&#x8861;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token comment">//&#x65B0;&#x589E;&#x8282;&#x70B9;&#x4F7F;&#x5F97;curNode&#x5DE6;&#x53F3;&#x5E73;&#x8861;</span>curNode<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>taller <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> curNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//&#x5F80;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x589E;&#x6DFB;&#x8282;&#x70B9;</span>curNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">__insert</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#x5F80;&#x53F3;&#x5B50;&#x6811;&#x589E;&#x52A0;&#x8282;&#x70B9;</span><span class="token keyword">if</span><span class="token punctuation">(</span>taller<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">switch</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>bf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>curNode<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>taller <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> curNode<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> taller <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>curNode <span class="token operator">=</span> <span class="token function">rightBalance</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span><span class="token punctuation">;</span>taller <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> curNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></pre><ul><li>&#x5DE6;&#x5E73;&#x8861;&#x8C03;&#x6574;&#x4EE3;&#x7801;</li></ul><pre data-role="codeBlock" data-info="Java" class="language-java"><span class="token comment">/* * &#x5DE6;&#x5E73;&#x8861;&#x64CD;&#x4F5C; */</span><span class="token comment">//[&#x5F53;&#x524D;curNode&#x7684;bf&gt;0&#xFF0C;&#x53C8;&#x518D;&#x5DE6;&#x5B50;&#x6811;&#x589E;&#x52A0;&#x8282;&#x70B9;&#x65F6;&#x9700;&#x8981;&#x5DE6;&#x5E73;&#x8861;&#x64CD;&#x4F5C;]</span><span class="token class-name">AVLNode</span> <span class="token function">leftBalance</span><span class="token punctuation">(</span><span class="token class-name">AVLNode</span> curNode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">AVLNode</span> <span class="token class-name">L</span> <span class="token operator">=</span> curNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span><span class="token punctuation">.</span>bf<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//LL&#x578B;&#x9700;&#x8981;&#x5DE6;&#x65CB;</span>curNode<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//&#x53F3;&#x65CB;&#x5E73;&#x8861;</span><span class="token class-name">L</span><span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//&#x53F3;&#x65CB;&#x5E73;&#x8861;</span><span class="token keyword">return</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span><span class="token punctuation">.</span>bf<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//LR&#x578B;&#x9700;&#x8981; &#x5148;&#x5DE6;&#x65CB;  &#x540E;&#x53F3;&#x65CB;</span><span class="token class-name">AVLNode</span> LR <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">.</span>right<span class="token punctuation">;</span> <span class="token comment">//&#x5DE6;&#x5B69;&#x5B50;&#x7684;&#x53F3;&#x5B69;&#x5B50;</span><span class="token comment">//&#x4EE5;&#x4E0B;&#x4EE3;&#x7801;&#x4E0D;&#x662F;&#x5F88;&#x7406;&#x89E3;,,,&#x753B;&#x4E00;&#x4E0B;&#x5B9E;&#x9645;&#x4F8B;&#x5B50;&#x53EF;&#x4EE5;&#x660E;&#x767D;&#xFF0C;&#xFF0C;&#x4F46;&#x4E3A;&#x5565;&#x5B50;LR.bf&#x4E0D;&#x4F1A;&#x4E00;&#x76F4;&#x88AB;&#x7EF4;&#x62A4;&#x4E3A;0&#xFF1F;&#xFF08;&#x56E0;&#x4E3A;LR&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x65B0;&#x589E;&#x8282;&#x70B9;?&#xFF09;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>LR<span class="token punctuation">.</span>bf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>curNode<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">L</span><span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>curNode<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">L</span><span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>curNode<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">L</span><span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>LR<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>curNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//&#x4E0D;&#x9700;&#x8981;&#x5DE6;&#x5E73;&#x8861;&#x5904;&#x7406;</span><span class="token keyword">return</span> curNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></pre><ul><li>&#x53F3;&#x5E73;&#x8861;&#x8C03;&#x6574;&#x4EE3;&#x7801;</li></ul><pre data-role="codeBlock" data-info="Java" class="language-java"><span class="token comment">//&#x53F3;&#x5E73;&#x8861;&#x64CD;&#x4F5C;</span><span class="token comment">/* * curNode bf&#x672C;&#x5DF2;&#x7ECF;-1&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x5728;&#x53F3;&#x65B9;&#x53C8;&#x65B0;&#x589E;&#x8282;&#x70B9; */</span><span class="token class-name">AVLNode</span> <span class="token function">rightBalance</span><span class="token punctuation">(</span><span class="token class-name">AVLNode</span> curNode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">AVLNode</span> <span class="token class-name">R</span> <span class="token operator">=</span> curNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>bf<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//RR&#x578B; </span>curNode<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">R</span><span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>bf<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//RL&#x578B;</span><span class="token class-name">AVLNode</span> RL <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">.</span>left<span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>RL<span class="token punctuation">.</span>bf<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>curNode<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">R</span><span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token class-name">R</span><span class="token punctuation">.</span>bf <span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>curNode<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>curNode<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">R</span><span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>RL<span class="token punctuation">.</span>bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>curNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> curNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></pre><ul><li>&#x5DE6;&#x65CB;&#x64CD;&#x4F5C;</li></ul><pre data-role="codeBlock" data-info="Java" class="language-java"><span class="token comment">//&#x5DE6;&#x65CB;&#x64CD;&#x4F5C;</span><span class="token class-name">AVLNode</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token class-name">AVLNode</span> curNode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">AVLNode</span> subRoot <span class="token operator">=</span> curNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>curNode<span class="token punctuation">.</span>right <span class="token operator">=</span> subRoot<span class="token punctuation">.</span>left<span class="token punctuation">;</span>subRoot<span class="token punctuation">.</span>left <span class="token operator">=</span> curNode<span class="token punctuation">;</span><span class="token keyword">return</span> subRoot<span class="token punctuation">;</span><span class="token punctuation">}</span></pre><ul><li>&#x53F3;&#x65CB;&#x64CD;&#x4F5C;</li></ul><pre data-role="codeBlock" data-info="Java" class="language-java"><span class="token comment">//&#x53F3;&#x65CB;&#x64CD;&#x4F5C;</span><span class="token class-name">AVLNode</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token class-name">AVLNode</span> curNode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">AVLNode</span> subRoot <span class="token operator">=</span> curNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span><span class="token comment">//&#x5DE6;&#x5B69;&#x5B50;&#x4E0A;&#x4F4D;</span>curNode<span class="token punctuation">.</span>left <span class="token operator">=</span> subRoot<span class="token punctuation">.</span>right<span class="token punctuation">;</span><span class="token comment">//&#x628A;&#x4F60;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#x7ED9;&#x6211;&#xFF0C;&#x4F5C;&#x4E3A;&#x6211;&#x7684;&#x5DE6;&#x5B69;&#x5B50;(&#x4FDD;&#x8BC1;&#x6392;&#x5E8F;&#x6027;)</span>subRoot<span class="token punctuation">.</span>right <span class="token operator">=</span> curNode<span class="token punctuation">;</span><span class="token comment">//&#x4F60;&#x4E0A;&#x4F4D;&#x540E;&#x6211;&#x6210;&#x4E3A;&#x4F60;&#x7684;&#x6709;&#x5B69;&#x5B50;</span><span class="token keyword">return</span> subRoot<span class="token punctuation">;</span><span class="token punctuation">}</span></pre><ul><li>&#x5176;&#x4ED6;&#x64CD;&#x4F5C;&#x5B9E;&#x73B0;&#xFF1A;<ul><li>&#x53EF;&#x53C2;&#x8003;&lt;&lt;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x4ECE;&#x5E94;&#x7528;&#x5230;&#x65F6;&#x95F4;&#xFF08;Java&#x7248;&#xFF09;&gt;&gt;</li></ul></li></ul><h2 class="mume-header" id="5-5-%E5%A4%9A%E8%B7%AF%E6%9F%A5%E6%89%BE%E6%A0%91">5-5 &#x591A;&#x8DEF;&#x67E5;&#x627E;&#x6811;</h2><ul><li><p>&#x591A;&#x8DEF;&#x67E5;&#x627E;&#x6811;&#x7684;&#x610F;&#x4E49;</p><blockquote><p>&#x5BF9;&#x4E8E;&#x6811;&#x6765;&#x8BF4;&#xFF0C;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x53EA;&#x80FD;&#x5B58;&#x50A8;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x90A3;&#x4E48;&#x5728;&#x5143;&#x7D20;&#x975E;&#x5E38;&#x591A;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C31;&#x4F1A;&#x4F7F;&#x5F97;&#x8981;&#x4E48;&#x6811;&#x7684;&#x5EA6;&#x975E;&#x5E38;&#x5927;&#xFF08;&#x7ED3;&#x70B9;&#x62E5;&#x6709;&#x5B50;&#x6811;&#x7684;&#x4E2A;&#x6570;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF09;&#xFF0C;&#x8981;&#x4E48;&#x6811;&#x7684;&#x9AD8;&#x5EA6;&#x975E;&#x5E38;&#x5927;&#xFF0C;&#x751A;&#x81F3;&#x4E24;&#x8005;&#x90FD;&#x5FC5;&#x987B;&#x8DB3;&#x591F;&#x5927;&#x624D;&#x884C;&#xFF0C;&#x8FD9;&#x5C31;&#x4F7F;&#x5F97;&#x5185;&#x5B58;&#x5B58;&#x53D6;&#x5916;&#x5B58;&#x6B21;&#x6570;&#x975E;&#x5E38;&#x591A;&#xFF0C;&#x8FD9;&#x663E;&#x7136;&#x6210;&#x4E86;&#x65F6;&#x95F4;&#x6548;&#x7387;&#x4E0A;&#x7684;&#x74F6;&#x9888;&#xFF0C;&#x8FD9;&#x8FEB;&#x4F7F;&#x6211;&#x4EEC;&#x8981;&#x6253;&#x7834;&#x6BCF;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x53EA;&#x5B58;&#x50A8;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x4E3A;&#x6B64;&#x5F15;&#x5165;&#x4E86;&#x591A;&#x8DEF;&#x67E5;&#x627E;&#x6811;&#x7684;&#x6982;&#x5FF5;</p></blockquote></li><li><p>2-3 &#x6811;</p><ul><li>&#x6BCF;&#x4E2A;&#x7ED3;&#x70B9;&#x90FD;&#x5177;&#x6709;&#x4E24;&#x4E2A;&#x5B69;&#x5B50;&#xFF08;&#x6211;&#x4EEC;&#x79F0;&#x5B83;&#x4E3A; 2 &#x7ED3;&#x70B9;&#xFF09;&#x6216;&#x4E09;&#x4E2A;&#x5B69;&#x5B50;&#xFF08;&#x6211;&#x4EEC;&#x79F0;&#x5B83;&#x4E3A; 3 &#x7ED3;&#x70B9;&#xFF09;&#x7684;&#x6811;</li><li>&#x7279;&#x6027;<br>&#x4E00;&#x4E2A; 2 &#x7ED3;&#x70B9; &#x5305;&#x542B;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x548C;&#x4E24;&#x4E2A;&#x5B69;&#x5B50;&#xFF08;&#x6216;&#x6CA1;&#x6709;&#x5B69;&#x5B50;&#xFF09;&#xFF0C;&#x4E14;&#x5DE6;&#x5B50;&#x6811;&#x6570;&#x636E;&#x5143;&#x7D20;&#x5C0F;&#x4E8E;&#x8BE5;&#x5143;&#x7D20;&#x53F3;&#x5B50;&#x6811;&#x6570;&#x636E;&#x5143;&#x7D20;&#x5927;&#x4E8E;&#x8BE5;&#x5143;&#x7D20;<br>&#x4E00;&#x4E2A; 3 &#x7ED3;&#x70B9; &#x5305;&#x542B;&#x4E00;&#x5C0F;&#x4E00;&#x5927;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x548C;&#x4E09;&#x4E2A;&#x5B69;&#x5B50;&#xFF08;&#x6216;&#x6CA1;&#x6709;&#x5B69;&#x5B50;&#xFF09;<br>&#x5982;&#x679C;&#x6709; 3 &#x4E2A;&#x5B69;&#x5B50;&#x7684;&#x8BDD;<br>&#x5DE6;&#x5B50;&#x6811;&#x5305;&#x542B;&#x5C0F;&#x4E8E;&#x8F83;&#x5C0F;&#x5143;&#x7D20;&#x7684;&#x5143;&#x7D20;<br>&#x53F3;&#x5B50;&#x6811;&#x5305;&#x542B;&#x5927;&#x4E8E;&#x8F83;&#x5927;&#x5143;&#x7D20;&#x7684;&#x5143;&#x7D20;<br>&#x4E2D;&#x95F4;&#x5B50;&#x6811;&#x5305;&#x542B;&#x4ECB;&#x4E8E;&#x4E24;&#x5143;&#x7D20;&#x4E4B;&#x95F4;&#x7684;&#x5143;&#x7D20;</li></ul></li><li><p>2-3-4 &#x6811;</p></li><li><p>B &#x6811;</p></li></ul><h2 class="mume-header" id="5-6-%E6%A0%91%E5%BD%A2%E9%97%AE%E9%A2%98%E5%92%8C%E6%9B%B4%E5%A4%9A%E6%A0%91">5-6 &#x6811;&#x5F62;&#x95EE;&#x9898;&#x548C;&#x66F4;&#x591A;&#x6811;&#x3002;</h2><ul><li>&#x5E73;&#x8861;&#x4E8C;&#x53C9;&#x6811;&#x548C;&#x5806;&#x7684;&#x7ED3;&#x5408;Treap</li><li>trie &#xFF1A;&#x67E5;&#x627E;&#x6548;&#x7387;&#x4E0E;&#x5355;&#x8BCD;&#x957F;&#x5EA6;&#x6709;&#x5173;&#xFF0C;&#x4E0E;&#x5355;&#x8BCD;&#x4E2D;&#x7684;&#x5355;&#x8BCD;&#x6570;&#x91CF;&#x65E0;&#x5173;</li><li>&#x5176;&#x4ED6;&#x6811;&#x5F62;(&#x9012;&#x5F52;)&#x95EE;&#x9898;&#xFF1A;<ul><li>&#x4E00;&#x6761;&#x9F99;&#x6E38;&#x620F;</li><li>8 &#x6570;&#x7801;&#x95EE;&#x9898;</li><li>8 &#x7687;&#x540E;&#x95EE;&#x9898;</li><li>&#x6570;&#x72EC;</li><li>&#x642C;&#x8FD0;&#x5DE5;</li></ul></li><li>&#x66F4;&#x591A;&#x6811;&#x7684;&#x7ED3;&#x6784;<ul><li>KD&#x6811;</li><li>&#x533A;&#x95F4;&#x6811;</li><li>&#x54C8;&#x592B;&#x66FC;&#x6811;</li></ul></li></ul><hr><h1 class="mume-header" id="%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%B9%B6%E6%9F%A5%E9%9B%86">&#x7B2C;&#x516D;&#x7AE0;:&#x5E76;&#x67E5;&#x96C6;</h1><h2 class="mume-header" id="6-1-%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%9F%BA%E7%A1%80">6-1 &#x5E76;&#x67E5;&#x96C6;&#x57FA;&#x7840;</h2><ul><li>&#x89E3;&#x51B3;&#x7684;&#x95EE;&#x9898;&#xFF1A;<ul><li>&#x8FDE;&#x63A5;&#x95EE;&#x9898;&#xFF0C; &#x6570;&#x5B66;&#x4E2D;&#x96C6;&#x5408;&#x7C7B;&#x7684;&#x5B9E;&#x73B0;&#xFF0C;</li><li>&#x8DEF;&#x5F84;&#x95EE;&#x9898;</li></ul></li><li>&#x5E76;&#x67E5;&#x96C6;&#x7684;&#x57FA;&#x672C;&#x65B9;&#x6CD5;<ul><li>union(p,q) &#x5C06;p&#x4E0E;q &#x8054;&#x5408; &#xFF08;&#x540C;&#x5C5E;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#xFF08;&#x8FDE;&#x901A;&#x5206;&#x652F;&#xFF09;&#xFF09;</li><li>find(p) &#x67E5;&#x627E;p&#x6240;&#x5728;&#x96C6;&#x5408;&#x5E8F;&#x53F7;</li><li>isConnect(p,q)</li></ul></li><li>&#x5E76;&#x67E5;&#x96C6;&#x7684;&#x5B9E;&#x73B0;<ul><li>&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#xFF08;QuickFind&#xFF09; &#xFF08;&#x6570;&#x7EC4;&#x7D22;&#x5F15;&#x4E3A;&#x5143;&#x7D20;&#x952E;&#x503C;&#xFF0C;&#x6570;&#x7EC4;&#x503C;&#x4E3A;&#x5BF9;&#x5E94;&#x7684;&#x96C6;&#x5408;&#x53F7;&#xFF09;<ul><li>union(p,q) &#x9700;&#x8981;&#x904D;&#x5386;&#x66F4;&#x65B0;&#x6240;&#x6709;&#x5143;&#x7D20;&#x7684;&#x96C6;&#x5408;&#x53F7;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;O(n)</li><li>find(p) &#x76F4;&#x63A5;&#x6570;&#x7EC4;&#x4E0B;&#x6807;&#x67E5;&#x627E;&#xFF0C;O(1)</li><li>isConnect()  &#x590D;&#x6742;&#x5EA6;O(1)</li></ul></li><li>&#x6811;&#x5F62;&#x5B9E;&#x73B0;&#xFF08;&#x6570;&#x7EC4;&#x7D22;&#x5F15;&#x4E3A;&#x5143;&#x7D20;&#x952E;&#x503C;&#xFF0C;&#x6570;&#x7EC4;&#x503C;&#x4E3A;&#x8BE5;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x7684;&#x7D22;&#x5F15;&#xFF09;<ul><li>union(p,q) &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;O(h)&#xFF0C;h&#x4E3A;&#x6811;&#x7684;&#x9AD8;&#x5EA6;</li><li>find(p) &#x9700;&#x8981;&#x56DE;&#x6EAF;&#x5230;(&#x6240;&#x5728;&#x5206;&#x652F;&#x7684;)&#x8DDF;&#x8282;&#x70B9;&#xFF0C;O(h)&#xFF0C;h&#x4E3A;&#x6811;&#x7684;&#x9AD8;&#x5EA6;</li><li>isConnect()  &#x590D;&#x6742;&#x5EA6;O(h&#xFF0C;h&#x4E3A;&#x6811;&#x7684;&#x9AD8;&#x5EA6;</li><li>&#x6811;&#x5F62;&#x5B9E;&#x73B0;&#x4E2D; union() &#x7684;&#x4E09;&#x79CD;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#xFF08;&#x4E0D;&#x65AD;&#x6539;&#x8FDB;&#xFF08;&#x964D;&#x4F4E;&#xFF09;&#x6811;&#x7684;&#x9AD8;&#x5EA6;h&#xFF09;<ul><li>&#x968F;&#x673A;&#x5408;&#x5E76;</li><li>&#x57FA;&#x4E8E;size&#x7684;&#x4F18;&#x5316;<ul><li>&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;size&#x6570;&#x7EC4;&#xFF0C;&#x5B58;&#x6BCF;&#x4E2A;&#x5206;&#x652F;&#x7684;&#x5143;&#x7D20;&#x591A;&#x5C11;</li><li>&#x5C06;&#x5143;&#x7D20;&#x8F83;&#x5C11;&#x7684;&#x6811;&#x5408;&#x5E76;&#x5230;&#x5143;&#x7D20;&#x8F83;&#x591A;&#x7684;&#x7684;&#x6811; &#x65B0;&#x7684;&#x5206;&#x652F;size = size1 + size2</li></ul></li><li>&#x57FA;&#x4E8E;rank&#x7684;&#x4F18;&#x5316;<ul><li>&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;rank&#x6570;&#x7EC4;&#xFF0C;&#x5B58;&#x6BCF;&#x4E2A;&#x5206;&#x652F;&#x5BF9;&#x5E94;&#x6811;&#x7684;&#x9AD8;&#x5EA6;</li><li>&#x5C06;&#x9AD8;&#x5EA6;&#x5C0F;&#x7684;&#x548C;&#x5E73;&#x5230;&#x9AD8;&#x5EA6;&#x5927;&#x7684;</li></ul></li></ul></li><li>find() &#x8FC7;&#x7A0B;&#x4E2D;&#x7684; &#x8DEF;&#x5F84;&#x538B;&#x7F29;&#xFF08;&#x964D;&#x4F4E;&#x6811;&#x7684;&#x9AD8;&#x5EA6;&#xFF09;<ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A; &#x57FA;&#x4E8E;&#x6811;&#x5F62;&#x5B9E;&#x73B0;&#x7684;&#x5E76;&#x67E5;&#x96C6;&#xFF0C;&#x5728;find()&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x56DE;&#x6EAF;&#x5230;&#x5206;&#x652F;&#x6811;&#x7684;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x5728;&#x56DE;&#x6EAF;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x6811;&#x7684;&#x9AD8;&#x5EA6;&#x8FDB;&#x884C;&#x8C03;&#x6574;&#x3002;</li><li>&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x601D;&#x8DEF;&#xFF1A; &#x56DE;&#x6EAF;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x5C06;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x4E0D;&#x65AD;&#x5411;&#x4E0A;&#x66F4;&#x65B0;</li><li>&#x4EE3;&#x7801;</li></ul></li></ul></li></ul><pre data-role="codeBlock" data-info="cpp" class="language-cpp">    <span class="token comment">// &#x67E5;&#x627E;&#x8FC7;&#x7A0B;, &#x67E5;&#x627E;&#x5143;&#x7D20;p&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x96C6;&#x5408;&#x7F16;&#x53F7;</span>    <span class="token comment">// O(h)&#x590D;&#x6742;&#x5EA6;, h&#x4E3A;&#x6811;&#x7684;&#x9AD8;&#x5EA6;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">assert</span><span class="token punctuation">(</span> p <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">&lt;</span> count <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// path compression 1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> p <span class="token operator">!=</span> parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">[</span>parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//&#x6307;&#x5411;&#x7236;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;</span>            p <span class="token operator">=</span> parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token comment">// path compression 2, &#x9012;&#x5F52;&#x7B97;&#x6CD5;</span><span class="token comment">//            if( p != parent[p] )</span><span class="token comment">//                parent[p] = find( parent[p] );</span><span class="token comment">//            return parent[p];</span>    <span class="token punctuation">}</span></pre></li><li>&#x5E76;&#x67E5;&#x96C6;&#x7684;&#x5E94;&#x7528;<ul><li>&#x9898;&#x76EE;<ul><li>leetcode130_<a href="https://leetcode-cn.com/problems/surrounded-regions/">&#x88AB;&#x56F4;&#x7ED5;&#x7684;&#x533A;&#x57DF;</a></li></ul></li></ul></li></ul><hr><h1 class="mume-header" id="%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%9B%BE">&#x7B2C;&#x4E03;&#x7AE0;: &#x56FE;</h1><h2 class="mume-header" id="7-1-%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80">7-1 &#x56FE;&#x8BBA;&#x57FA;&#x7840;</h2><ul><li>&#x56FE;&#x7684;&#x5E94;&#x7528;<ul><li>&#x901A;&#x4FE1;&#x7F51;&#x8DEF;</li><li>&#x793E;&#x4EA4;&#x7F51;&#x7EDC;</li><li>&#x72B6;&#x6001;&#x673A;&#x7B49;</li></ul></li><li>&#x56FE;&#x7684;&#x5206;&#x7C7B;<ul><li>&#x65E0;&#x6743;&#x56FE;&#x4E0E;&#x6709;&#x6743;&#x56FE;</li><li>&#x6709;&#x5411;&#x56FE;&#x4E0E;&#x65E0;&#x5411;&#x56FE;</li></ul></li><li>&#x56FE;&#x7684;&#x8868;&#x793A;<ul><li>&#xFF08;n,m&#xFF09; n&#x4E2A;&#x9876;&#x70B9;&#xFF0C;m&#x6761;&#x8FB9;</li><li>&#x90BB;&#x63A5;&#x77E9;&#x9635; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&#x2217;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n * n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">&#x2217;</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>&#x77E9;&#x9635; &#x9002;&#x5408;&#x7A20;&#x5BC6;&#x56FE;</li><li>&#x90BB;&#x63A5;&#x8868;  &#x9002;&#x5408;&#x7A00;&#x758F;&#x56FE;</li><li>&#x5176;&#x4ED6;</li></ul></li></ul><h2 class="mume-header" id="7-2-%E7%9B%B8%E9%82%BB%E7%82%B9%E8%BF%AD%E4%BB%A3%E5%99%A8">7-2 &#x76F8;&#x90BB;&#x70B9;&#x8FED;&#x4EE3;&#x5668;</h2><ul><li>&#x56FE;&#x904D;&#x5386;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x907F;&#x4E0D;&#x5F00;&#x7684;&#x4FBF;&#x662F;&#x904D;&#x5386;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x76F8;&#x90BB;&#x8282;&#x70B9;</li><li>&#x8FED;&#x4EE3;&#x5668;&#x7684;&#x601D;&#x60F3;&#xFF1A; &#x5BF9;&#x5916;&#x63D0;&#x4F9B;&#x8BBF;&#x95EE;&#x6570;&#x636E;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x540C;&#x65F6;&#x907F;&#x514D;&#x5185;&#x90E8;&#x6570;&#x636E;&#x76F4;&#x63A5;&#x66B4;&#x9732;&#x5728;&#x5916;</li><li>&#x590D;&#x6742;&#x5EA6;&#x5206;&#x6790;<ul><li>&#x90BB;&#x63A5;&#x77E9;&#x9635; O(n)</li><li>&#x90BB;&#x63A5;&#x8868; O(m)</li></ul></li></ul><h2 class="mume-header" id="7-4-%E5%9B%BE%E7%9A%84%E7%AE%97%E6%B3%95%E6%A1%86%E6%9E%B6">7-4 &#x56FE;&#x7684;&#x7B97;&#x6CD5;&#x6846;&#x67B6;</h2><ul><li>&#x8BFB;&#x56FE;&#x65B9;&#x5F0F;&#xFF08;&#x4EC5;&#x9650;&#x672C;&#x8BFE;&#x7A0B;&#xFF09;<ul><li>&#x4E0D;&#x65AD;&#x6DFB;&#x52A0;&#x8FB9;&#xFF08;&#x9700;&#x8981;&#x77E5;&#x9053;&#x9876;&#x70B9;&#x6570;&#xFF09;</li></ul></li></ul><h2 class="mume-header" id="7-5-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E5%92%8C%E8%81%94%E9%80%9A%E5%88%86%E9%87%8F">7-5 &#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#x548C;&#x8054;&#x901A;&#x5206;&#x91CF;</h2><ul><li>&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#xFF08;DFS)<ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3; &#x9012;&#x5F52;</li><li>&#x590D;&#x6742;&#x5206;&#x6790;<ul><li>&#x90BB;&#x63A5;&#x8868;O&#xFF08;V+E&#xFF09;</li><li>&#x90BB;&#x63A5;&#x77E9;&#x9635;O(V^2)</li></ul></li></ul></li><li>&#x6C42;&#x8FDE;&#x901A;&#x5206;&#x652F;<ul><li>&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;size&#x4E3A;&#x9876;&#x70B9;&#x6570;&#x7684;vis&#x6570;&#x7EC4; &#xFF08;&#x53EF;&#x4EE5;&#x5B58;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x662F;&#x5426;&#x88AB;&#x8BBF;&#x95EE;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x5B58;&#x5C5E;&#x4E8E;&#x54EA;&#x4E2A;&#x5206;&#x652F;&#xFF09;</li><li>&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x6CA1;&#x6709;&#x88AB;&#x8BBF;&#x95EE;&#x7684;&#x8282;&#x70B9;&#x8FDB;&#x884C;&#x6DF1;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;</li></ul></li><li>&#x5BFB;&#x8DEF;<ul><li>&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;from &#x6570;&#x7EC4; &#xFF0C;from[i]&#x5B58;&#x7B2C;i&#x4E2A;&#x8282;&#x70B9;&#x5728;dfs(s)&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;&#x4E0A;&#x4E00;&#x4E2A;&#x8282;&#x70B9;</li><li>&#x4ECE;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> &#x8282;&#x70B9;&#x5F00;&#x59CB; dfs()</li><li>&#x4ECE;&#x76EE;&#x7684;&#x70B9;d &#x5F00;&#x59CB;&#xFF0C;&#x6839;&#x636E;from&#x6570;&#x7EC4;&#x56DE;&#x6EAF;&#xFF0C;&#x5F97;&#x5230;s&#x5230;d&#x7684;&#x8DEF;&#x5F84;</li></ul></li></ul><h2 class="mume-header" id="7-7-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E5%92%8C%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84">7-7 &#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;&#x548C;&#x6700;&#x77ED;&#x8DEF;&#x5F84;</h2><ul><li>&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x904D;&#x5386;<ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3; &#x8FED;&#x4EE3;</li><li>&#x5B9E;&#x73B0;&#x7EC6;&#x8282;<ul><li><strong>&#x5904;&#x7406;&#x73AF;</strong>&#xFF1A; &#x76F8;&#x5BF9;&#x4E8E;&#x6811;&#x6765;&#x8BF4; &#x56FE;&#x5B58;&#x5728;&#x73AF;&#x7684;&#x53EF;&#x80FD;&#xFF0C;&#x6240;&#x4EE5;&#x904D;&#x5386;&#x7684;&#x65F6;&#x5019;&#x662F;<strong>&#x5C06;&#x52A0;&#x5165;&#x961F;&#x5217;&#x7684;&#x5143;&#x7D20;&#x6807;&#x8BB0;&#x4E3A;&#x5DF2;&#x8BBF;&#x95EE;</strong>&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x8BBF;&#x95EE;&#x7ED3;&#x70B9;&#x65F6;&#x624D;&#x6807;&#x8BB0;&#x3002;</li></ul></li><li>&#x590D;&#x6742;&#x5EA6;&#x5206;&#x6790;<ul><li>&#x90BB;&#x63A5;&#x8868;O&#xFF08;V+E&#xFF09;</li><li>&#x90BB;&#x63A5;&#x77E9;&#x9635;O(V^2)</li></ul></li><li>&#x6C42; &#x65E0;&#x6743;&#x56FE;&#x7684; <strong>&#x6700;&#x77ED;&#x8DEF;&#x5F84;</strong><ul><li>&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;from&#xFF08;&#x56DE;&#x6EAF;&#xFF09;&#x6570;&#x7EC4;&#xFF0C;from[i]&#x5B58;&#x7B2C;i&#x4E2A;&#x8282;&#x70B9;&#x5230;dfs(s)&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;&#x4E0A;&#x4E00;&#x4E2A;&#x8282;&#x70B9;</li><li>&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;order&#x6570;&#x7EC4;&#xFF0C; order[i] &#x5B58; &#x7B2C;i&#x4E2A;&#x8282;&#x70B9;&#x5728;&#x4ECE;s&#x5F00;&#x59CB;&#x7684;bfs&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;&#x7B2C;&#x51E0;&#x5C42;&#xFF08;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#xFF09;</li><li>&#x4ECE;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> &#x8282;&#x70B9;&#x5F00;&#x59CB; bfs()</li><li>&#x4ECE; d &#x5F00;&#x59CB;&#xFF0C;&#x6839;&#x636E;from&#x6570;&#x7EC4;&#x56DE;&#x6EAF;</li></ul></li></ul></li></ul><h2 class="mume-header" id="7-8-%E6%9B%B4%E5%A4%9A%E6%97%A0%E6%9D%83%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8">7-8 &#x66F4;&#x591A;&#x65E0;&#x6743;&#x56FE;&#x7684;&#x5E94;&#x7528;</h2><ul><li>&#x8FF7;&#x5BAB;&#x751F;&#x6210;&#xFF0C;ps&#x62A0;&#x56FE;&#x7B49;</li></ul><hr><h1 class="mume-header" id="%E7%AC%AC%E5%85%AB%E7%AB%A0%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91">&#x7B2C;&#x516B;&#x7AE0;&#xFF1A;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;</h1><h2 class="mume-header" id="8-1-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%97%AE%E9%A2%98%E5%92%8C%E5%88%87%E5%88%86%E5%AE%9A%E7%90%86">8-1 &#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x95EE;&#x9898;&#x548C;&#x5207;&#x5206;&#x5B9A;&#x7406;</h2><ul><li>&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x7684;&#x5E94;&#x7528;<ul><li>&#x7535;&#x7F06;&#x5E03;&#x7EBF;&#x8BBE;&#x8BA1;&#xFF0C;&#x7F51;&#x7EDC;&#x8BBE;&#x8BA1;&#xFF0C;&#x7535;&#x8DEF;&#x8BBE;&#x8BA1;&#x7B49;&#x3002;</li></ul></li><li>&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x7684;&#x9002;&#x7528;&#x8303;&#x56F4;<ul><li>&#x4E3B;&#x8981;&#x9488;&#x5BF9; &#x5E26;&#x6743; &#x65E0;&#x5411; &#x8FDE;&#x901A;&#x56FE;</li></ul></li><li>&#x5207;&#x5206;&#x5B9A;&#x7406;<ul><li>&#x76F8;&#x5173;&#x6982;&#x5FF5;<ul><li>&#x5207;&#x5206;</li><li>&#x6A2A;&#x5207;&#x8FB9;</li></ul></li><li><strong>&#x5207;&#x5206;&#x5B9A;&#x7406;</strong>&#xFF1A; &#x7ED9;&#x5B9A;&#x4EFB;&#x610F;&#x5207;&#x5206;&#xFF0C;&#x6A2A;&#x5207;&#x8FB9;&#x4E2D;&#x6743;&#x503C;&#x6700;&#x5C0F;&#x7684;&#x8FB9;&#x5FC5;&#x7136;&#x5C5E;&#x4E8E;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;</li></ul></li></ul><h2 class="mume-header" id="8-2-prim%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96">8-2 Prim&#x7B97;&#x6CD5;&#x53CA;&#x5176;&#x4F18;&#x5316;</h2><ul><li>Lazy Prim &#x7B97;&#x6CD5;<ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A; &#x8FED;&#x4EE3;/&#x9012;&#x5F52; &#x8D2A;&#x5FC3;&#xFF08;&#x6BCF;&#x6B21;&#x6839;&#x636E;&#x5207;&#x5206;&#x5B9A;&#x7406;&#x5F97;&#x5230;&#x5C40;&#x90E8;&#x6700;&#x4F18;&#xFF09; &#x52A8;&#x6001;&#x89C4;&#x5212;&#xFF1F;</li><li>&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;<ul><li>&#x9012;&#x5F52;/&#x8FED;&#x4EE3;&#x904D;&#x5386;&#x8282;&#x70B9;</li><li>&#x5C06;&#x8282;&#x70B9;&#x96C6;&#x5408; &#x5206;&#x4E3A;  &#x5DF2;&#x7ECF;<strong>&#x88AB;&#x8BBF;&#x95EE;&#x8FC7;&#x7684;&#x8282;&#x70B9;</strong>&#x548C;<strong>&#x672A;&#x88AB;&#x8BBF;&#x95EE;&#x8FC7;&#x7684;&#x8282;&#x70B9;</strong>&#xFF0C;&#x5E76;&#x5C06;&#x5207;&#x5206;&#x8FD9;&#x4E24;&#x4E2A;&#x96C6;&#x5408;&#x7684;<strong>&#x6A2A;&#x5207;&#x8FB9;</strong>&#x5B58;&#x5165;&#x6700;&#x5C0F;&#x5806;&#x4E2D;</li><li>&#x6BCF;&#x6B21;&#x9009;&#x62E9;&#x6700;&#x5C0F;&#x5806;&#x4E2D;&#x7684;&#x6A2A;&#x5207;&#x8FB9; &#x51FA;&#x5806;<ul><li>&#x82E5; &#x8BE5;&#x6A2A;&#x5207;&#x8FB9;&#x7684;&#x4E24;&#x4E2A;&#x7AEF;&#x70B9;&#x5747; &#x5DF2;&#x7ECF;&#x88AB;&#x8BBF;&#x95EE; &#xFF0C; &#x4E22;&#x5F03;&#x8BE5;&#x8FB9;&#xFF0C; &#x4E0D;&#x505A;&#x64CD;&#x4F5C;</li><li>&#x5426;&#x5219;&#xFF0C; &#x5C06;&#x8BE5;&#x8FB9;&#x52A0;&#x5165;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x4E2D;&#xFF0C;&#x7EE7;&#x7EED;<strong>&#x904D;&#x5386; &#x8BE5;&#x8FB9;&#x4E2D;&#x672A;&#x88AB;&#x8BBF;&#x95EE;&#x7684;&#x70B9;</strong>&#x3002;</li></ul></li></ul></li><li>lazy&#x4F53;&#x73B0;&#x5728;&#xFF08;&#x5C40;&#x9650;&#x6027;&#xFF09;:<ul><li>&#x6700;&#x5C0F;&#x5806;&#x4E2D;&#xFF0C;&#x7EF4;&#x62A4;&#x7684;&#x6A2A;&#x5207;&#x8FB9;&#x4E2D;&#xFF0C;&#x6709;&#x5F88;&#x591A;&#x4E0D;&#x518D;&#x65F6;&#x6A2A;&#x5207;&#x8FB9;&#x7684; &#x6CA1;&#x6709;&#x53CA;&#x65F6;&#x4E22;&#x5F03;&#x3002;</li><li>&#x590D;&#x6742;&#x5EA6; O(ElogE)</li></ul></li></ul></li><li>Prim&#x7B97;&#x6CD5;&#x7684;&#x4F18;&#x5316;<ul><li>&#x7528;<strong>&#x7D22;&#x5F15;&#x5806;</strong> (pq)&#x6765;&#x7EF4;&#x62A4;<ul><li>&#x6BCF;&#x4E2A;&#x5DF2;&#x7ECF;&#x88AB;&#x8BBF;&#x95EE;&#x7684;&#x70B9;&#x5BF9;&#x5E94;&#x7684;&#x6700;&#x5C0F;&#x6A2A;&#x5207;&#x8FB9; &#x7684;&#x6743;&#x91CD;&#x3002;pq.get&#xFF08;i&#xFF09; &#x8868;&#x793A;&#x7B2C;i&#x4E2A;&#x8282;&#x70B9;&#x5173;&#x8054;&#x7684;&#x5F53;&#x524D;&#x6700;&#x5C0F;&#x6A2A;&#x5207;&#x8FB9;&#x6743;&#x91CD;</li><li>&#x4E0A;&#x8FF0;&#x6A2A;&#x5207;&#x8FB9;&#x96C6;&#x5408;&#x4E2D; &#x7684; &#x6700;&#x5C0F;&#x6A2A;&#x5207;&#x8FB9;&#x7684;&#x6743;&#x91CD; &#xFF08;&#x6700;&#x5C0F;&#x4E2D;&#x7684;&#x6700;&#x5C0F;&#xFF09; &#xFF08;&#x53CA;&#x5806;&#x9876;&#xFF09;</li><li>&#x7528; edgeTo &#x8F85;&#x52A9;&#x7EF4;&#x62A4; &#x8FB9;&#x7684;&#x4FE1;&#x606F;&#xFF08;&#x8D77;&#x59CB;&#x70B9;&#xFF09;</li></ul></li><li>&#x7528; vis &#x6570;&#x7EC4;&#x6765;&#x7EF4;&#x62A4; &#x8282;&#x70B9;&#x662F;&#x5426;&#x5DF2;&#x88AB;&#x8BBF;&#x95EE;</li><li>Prim &#x7B97;&#x6CD5;&#x6D41;&#x7A0B;<ul><li>&#x521D;&#x59CB;&#x5316;&#xFF1A; &#x5C06;&#x8D77;&#x59CB;&#x70B9;&#x7684;&#x6A2A;&#x5207;&#x8FB9; &#x7684;&#x6743;&#x503C;&#x52A0;&#x5165;&#x7D22;&#x5F15;&#x5806;<strong>pq</strong>&#x4E2D;&#xFF0C;&#x8D77;&#x59CB;&#x70B9;&#x6807;&#x8BB0;&#x4E3A; &#x5DF2;&#x7ECF;&#x88AB;&#x8BBF;&#x95EE;</li><li>&#x5FAA;&#x73AF;&#xFF1A;<ul><li>&#x9009;<strong>pq</strong>&#x4E2D; &#x6700;&#x5C0F;&#x6743;&#x503C;&#x7684;&#x6A2A;&#x5207;&#x8FB9;<strong>e</strong> &#x52A0;&#x5165;&#x5230;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x7684; &#x8FB9;&#x96C6;&#x5408;</li><li><strong>&#x9012;&#x5F52;</strong> &#x9009;&#x51FA;&#x6765;&#x8FB9;<strong>e</strong>&#x7684;&#x4E24;&#x4E2A;&#x7AEF;&#x70B9;&#x4E2D; &#x672A;&#x88AB;&#x8BBF;&#x95EE;&#x7684;&#x8282;&#x70B9;v&#xFF1A;<ul><li>&#x7AEF;&#x70B9;v &#x6807;&#x8BB0;&#x4E3A; &#x5DF2;&#x7ECF;&#x88AB;&#x8BBF;&#x95EE;</li><li>&#x904D;&#x5386;&#x7AEF;&#x70B9;v &#x7684; &#x90BB;&#x63A5;&#x8FB9;<strong>adjEdge</strong>&#xFF0C;&#x90BB;&#x63A5;&#x8FB9;&#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x7AEF;&#x70B9;<strong>w</strong><ul><li>&#x4FDD;&#x8BC1;**pq[w]**&#x5C0F;&#xFF08;(&#x4E0E;w&#x8282;&#x70B9;&#x5173;&#x8054;&#x7684;&#x5F53;&#x524D;&#x6700;&#x5C0F;&#x6A2A;&#x5207;&#x8FB9;&#x7684;&#x6743;&#x91CD;&#xFF09;<ul><li>&#x82E5;<strong>pq[w]</strong>) &#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x5C06; <strong>adjEdge</strong> &#x7684;&#x6743;&#x91CD; &#x66F4;&#x65B0;&#x81F3; <strong>pq[w]</strong></li><li>&#x6216;&#x8005;&#x82E5;<strong>adjEdge</strong>&#x7684;&#x6743;&#x91CD;&#x5C0F;&#x4E8E; <strong>pq[w]</strong>  &#x5219;&#x5C06; <strong>adjEdge</strong> &#x7684;&#x6743;&#x91CD;&#x66F4;&#x65B0;&#x81F3;<strong>pq[w]</strong></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>&#x590D;&#x6742;&#x5EA6;&#x5206;&#x6790; O(ElogV)</li></ul></li></ul><h2 class="mume-header" id="8-3-krusk%E7%AE%97%E6%B3%95">8-3 Krusk&#x7B97;&#x6CD5;</h2><ul><li>&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A; &#x8D2A;&#x5FC3; &#x4E0D;&#x65AD;&#x5C06;<strong>&#x4E0D;&#x4E0E;&#x5DF2;&#x6DFB;&#x52A0;&#x7684;&#x8FB9;&#x6784;&#x6210;&#x5708;&#x7684;&#x6700;&#x5C0F;&#x8FB9;</strong> &#x52A0;&#x5165;&#x5230;&#x751F;&#x6210;&#x6811;&#x8FB9;&#x96C6;&#x5408;&#x79CD;</li><li>&#x6570;&#x636E;&#x7ED3;&#x6784;<ul><li>&#x7528;&#x6700;&#x5C0F;&#x5806;&#xFF0C;&#x7EF4;&#x62A4;&#x8FB9;&#x96C6;&#x5408;&#xFF0C;&#x4FDD;&#x8BC1;&#x6BCF;&#x6B21;&#x80FD;&#x53D6;&#x51FA;&#x5269;&#x4F59;&#x8FB9;&#x4E2D;&#x7684;&#x6700;&#x5C0F;&#x8FB9;</li><li>&#x7528;&#x5E76;&#x67E5;&#x96C6;&#xFF0C;&#x7EF4;&#x62A4;&#x8282;&#x70B9;&#x5728;&#x5F53;&#x524D;&#x751F;&#x6210;&#x6811;&#x8FB9;&#x96C6;&#x5408;&#x4E0B;&#x7684;&#x8FDE;&#x901A;&#x5EA6;&#xFF0C;&#x5224;&#x65AD;&#x65B0;&#x589E;&#x8FB9;&#x662F;&#x5426;&#x6784;&#x6210;&#x73AF;</li></ul></li><li>&#x7B97;&#x6CD5;&#x6D41;&#x7A0B;<ul><li>&#x5BF9;&#x8FB9;&#x8FDB;&#x884C;&#x6392;&#x5E8F;(&#x590D;&#x6742;&#x5EA6;O(ElogE))&#xFF0C;&#x7528;&#x6700;&#x6700;&#x5C0F;&#x5806;&#x6765;&#x7EF4;&#x62A4;&#x8FB9;&#x96C6;&#x5408;&#x3002;</li><li>&#x5C06;&#x6700;&#x5C0F;&#x8FB9;&#x51FA;&#x5806;&#xFF0C;&#x5E76;&#x52A0;&#x5165;&#x751F;&#x6210;&#x6811;&#x7684;&#x96C6;&#x5408;&#x3002;</li><li>&#x5FAA;&#x73AF;&#x5F00;&#x59CB;&#xFF1A;<ul><li>&#x5C06; &#x5269;&#x4F59;&#x8FB9;&#x96C6;&#x5408;&#x4E2D; &#x6700;&#x5C0F;&#x8FB9; &#x51FA;&#x5806;<ul><li>&#x5224;&#x65AD;&#x6539;&#x8FB9;&#x4E0E; &#x751F;&#x6210;&#x6811;&#x8FB9;&#x96C6;&#x5408;&#x4E2D;&#x7684;&#x8FB9;&#x662F;&#x5426; &#x6784;&#x6210;&#x73AF; &#xFF08;&#x7528;&#x5E76;&#x67E5;&#x96C6;&#x5224;&#x65AD;&#xFF09;<ul><li>&#x82E5;&#x6210;&#x73AF; &#x629B;&#x5F03;&#xFF0C; &#x7EE7;&#x7EED;&#x627E;&#x4E0B;&#x4E00;&#x4E2A;&#x8FB9;</li><li>&#x5C06;&#x6539;&#x8FB9;&#x52A0;&#x5165;&#x751F;&#x6210;&#x6811;&#x7684;&#x8FB9;&#x96C6;&#x5408;</li></ul></li></ul></li></ul></li></ul></li><li>&#x590D;&#x6742;&#x5EA6;&#x5206;&#x6790; O(ElogE)</li></ul><h2 class="mume-header" id="8-6-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%9D%E8%80%83">8-6 &#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x7B97;&#x6CD5;&#x7684;&#x601D;&#x8003;</h2><ul><li>&#x5176;&#x4ED6;&#x6700;&#x5C0F;&#x751F;&#x6210;&#x6811;&#x7684;&#x7B97;&#x6CD5;<ul><li>Vyssotsky&apos;s Algorithm &#x5C06;&#x8FB9;&#x9010;&#x6E10;&#x6DFB;&#x52A0;&#x5230;&#x751F;&#x6210;&#x6811;&#x4E2D;&#xFF0C;&#x4E00;&#x65E6;&#x5F62;&#x6210;&#x73AF;&#xFF0C;&#x5220;&#x9664;&#x73AF;&#x4E2D;&#x6743;&#x503C;&#x6700;&#x5927;&#x7684;&#x8FB9;</li></ul></li></ul><hr><h1 class="mume-header" id="%E7%AC%AC%E4%B9%9D%E7%AB%A0%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84">&#x7B2C;&#x4E5D;&#x7AE0;&#xFF1A;&#x6700;&#x77ED;&#x8DEF;&#x5F84;</h1><h2 class="mume-header" id="9-1-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E5%92%8C%E6%9D%BE%E5%BC%9B%E6%93%8D%E4%BD%9C">9-1 &#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x95EE;&#x9898;&#x548C;&#x677E;&#x5F1B;&#x64CD;&#x4F5C;</h2><h2 class="mume-header" id="9-2-dijkstra%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%9D%E6%83%B3">9-2 Dijkstra&#x7B97;&#x6CD5;&#x7684;&#x601D;&#x60F3;</h2><h2 class="mume-header" id="9-3-%E5%AE%9E%E7%8E%B0dijkstra%E7%AE%97%E6%B3%95">9-3 &#x5B9E;&#x73B0;Dijkstra&#x7B97;&#x6CD5;</h2><h2 class="mume-header" id="9-4-%E8%B4%9F%E6%9D%83%E8%BE%B9%E5%92%8Cbellman-ford%E7%AE%97%E6%B3%95">9-4 &#x8D1F;&#x6743;&#x8FB9;&#x548C;Bellman-Ford&#x7B97;&#x6CD5;</h2><h2 class="mume-header" id="9-5-%E5%AE%9E%E7%8E%B0bellman-ford%E7%AE%97%E6%B3%95">9-5 &#x5B9E;&#x73B0;Bellman-Ford&#x7B97;&#x6CD5;</h2><h2 class="mume-header" id="9-6-%E6%9B%B4%E5%A4%9A%E5%92%8C%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%9B%B8%E5%85%B3%E7%9A%84%E6%80%9D%E8%80%83">9-6 &#x66F4;&#x591A;&#x548C;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x76F8;&#x5173;&#x7684;&#x601D;&#x8003;</h2><hr><h1 class="mume-header" id="%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%BB%93%E6%9D%9F%E8%AF%AD">&#x7B2C;&#x5341;&#x7AE0;&#xFF1A;&#x7ED3;&#x675F;&#x8BED;</h1>      </div>                                                  </body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;
      &lt;title&gt;&amp;#x6155;&amp;#x8BFE;&amp;#x7F51;-&amp;#x7B97;&amp;#x6CD5;&amp;#x4E0E;&amp;#x6570;&amp;#x636E;&amp;#x7ED3;&amp;#x6784;&amp;#x2014;&amp;#x5B66;&amp;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/08/13/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/08/13/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-13T06:37:16.472Z</published>
    <updated>2020-08-13T06:37:25.550Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>慕课网-算法与数据结构—学习总结</title>
    <link href="http://yoursite.com/2020/08/12/%E6%85%95%E8%AF%BE%E7%BD%91-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/08/12/%E6%85%95%E8%AF%BE%E7%BD%91-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2020-08-12T08:21:41.000Z</published>
    <updated>2020-08-14T08:13:44.725Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>慕课网-算法与数据结构-学习总结</strong>  </p></blockquote><hr><h1 id="第一章-引言"><a href="#第一章-引言" class="headerlink" title="第一章 引言"></a>第一章 引言</h1><p><a href="https://github.com/liuyubobobo/Play-with-Algorithms">课程源码play-with-Algorithms</a></p><h1 id="第二章-排序基础"><a href="#第二章-排序基础" class="headerlink" title="第二章 排序基础"></a>第二章 排序基础</h1><ul><li><strong>排序的稳定性</strong><br>  排序后是否改变原序列键值相同的序列的先后关系</li><li><strong>内排序与外排序</strong><br>  外排序： 由于排序记录个数太多，不能同时放置在内存中，整个排序过程需要在内外存之间多次交换数据才能进行 。外部排序最常用的算法是多路归并排序</li><li><strong>影响排序的三个方面</strong>  <ul><li>时间性能<ul><li>比较</li><li>移动</li></ul></li><li>辅助空间</li><li>算法复杂度  <h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2></li></ul></li></ul><ul><li><p>冒泡排序</p><ul><li>基本思想：两两交换，将最大（或最小）的交换至队列前  <h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2></li></ul></li><li><p>简单选择排序  </p><ul><li>基本思想：在未排序的序列种找到最小（或最大）的元素放到前面  </li><li><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cucnVub29iLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8wOS9TZWxlY3Rpb24tU29ydC1BbmltYXRpb24uZ2lm" alt="动画演示">  </li></ul></li><li><p>参考实现代码（cpp）</p><pre><code>    template&lt;typename T&gt;    void selectionSort(T arr[], int n)&amp;#123;        for(int i = 0 ; i &lt; n ; i ++)&amp;#123;            int minIndex = i;            for( int j = i + 1 ; j &lt; n ; j ++ )                if( arr[j] &lt; arr[minIndex] )                    minIndex = j;            swap( arr[i] , arr[minIndex] );        &amp;#125;    &amp;#125;</code></pre></li><li><p>直接选择排序  </p></li><li><p>树型选择排序</p></li></ul><h2 id="插入排序及其改进"><a href="#插入排序及其改进" class="headerlink" title="插入排序及其改进"></a>插入排序及其改进</h2><ul><li><p>直接插入排序  </p><ul><li><p>基本思想: 将未排序的元素插入到已经排好序的队列种对应的位置</p></li><li><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMTAxNjU5NC0xNTBiNmM0NjJlM2VkODA5LnBuZw?x-oss-process=image/format,png" alt="示意图">  </p></li><li><p>代码</p><pre><code>template&lt;typename T&gt;void insertionSort(T arr[], int n)&amp;#123;    for( int i = 1 ; i &lt; n ; i ++ ) &amp;#123;    // 寻找元素arr[i]合适的插入位置    // 写法1    //        for( int j = i ; j &gt; 0 ; j-- )    //            if( arr[j] &lt; arr[j-1] )    //                swap( arr[j] , arr[j-1] );    //            else    //                break;    // 写法2    //        for( int j = i ; j &gt; 0 &amp;&amp; arr[j] &lt; arr[j-1] ; j -- )    //            swap( arr[j] , arr[j-1] );    // 写法3                T e = arr[i];                int j; // j保存元素e应该插入的位置                for (j = i; j &gt; 0 &amp;&amp; arr[j-1] &gt; e; j--)                    arr[j] = arr[j-1];                arr[j] = e;    &amp;#125;    return;&amp;#125;</code></pre></li><li><p>改进：   </p><ul><li><p><strong>折半插入排序：</strong> 找到已排好序种对应位置时 用 折半查找   </p></li><li><p><strong>希尔排序</strong>:</p><ul><li><p>基本思想：交换不相邻的元素以对数组的<strong>局部</strong>进行排序</p></li><li><p><img src="https://upload-images.jianshu.io/upload_images/7779232-d19c19b7153b27b2.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/665/format/webp"></p></li><li><p>第一个O(n log n)的排序算法</p></li><li><p>参考代码</p><pre><code>template&lt;typename T&gt;void shellSort(T arr[], int n)&amp;#123;    // 计算 increment sequence: 1, 4, 13, 40, 121, 364, 1093...    int h = 1;    while( h &lt; n/3 )        h = 3 * h + 1;    while( h &gt;= 1 )&amp;#123;        // h-sort the array        for( int i = h ; i &lt; n ; i ++ )&amp;#123;            // 对 arr[i], arr[i-h], arr[i-2*h], arr[i-3*h]... 使用插入排序            T e = arr[i];            int j;            for( j = i ; j &gt;= h &amp;&amp; e &lt; arr[j-h] ; j -= h )                arr[j] = arr[j-h];            arr[j] = e;        &amp;#125;        h /= 3;    &amp;#125;&amp;#125;</code></pre></li><li><p><a href="https://www.jianshu.com/p/642b19f8a69c">希尔排序及其优化</a>  </p></li></ul></li><li><p>其他： 路插入排序,表插入排序等。</p></li></ul></li></ul></li></ul><hr><h1 id="第三章-高级排序问题"><a href="#第三章-高级排序问题" class="headerlink" title="第三章 高级排序问题"></a>第三章 高级排序问题</h1><h2 id="归并排序及其优化"><a href="#归并排序及其优化" class="headerlink" title="归并排序及其优化"></a>归并排序及其优化</h2><ul><li><p>基本思想： (分治)将排序序列差分成 两个等长的子序列，对子序列进行排序后再归并</p></li><li><p>参考核心代码(cpp)</p><pre><code>    // 使用优化的归并排序算法, 对arr[l...r]的范围进行排序    template&lt;typename T&gt;    void __mergeSort2(T arr[], int l, int r)&amp;#123;        // 优化2: 对于小规模数组, 使用插入排序        if( r - l &lt;= 15 )&amp;#123;            insertionSort(arr, l, r);            return;        &amp;#125;        int mid = (l+r)/2;        __mergeSort2(arr, l, mid);        __mergeSort2(arr, mid+1, r);        // 优化1: 对于arr[mid] &lt;= arr[mid+1]的情况,不进行merge        // 对于近乎有序的数组非常有效,但是对于一般情况,有一定的性能损失        if( arr[mid] &gt; arr[mid+1] )            __merge(arr, l, mid, r);    &amp;#125;</code></pre></li><li><p>优化点：    </p><pre><code>- 当排序的元素少于一定（16）时，直接调用 插入排序  - 如果第一个序列的最大值小于第二个序列的最小值，则不用比较，直接合并  </code></pre><ul><li><p>归并排序的自底向上写法（迭代）  </p></li><li><p><strong>核心代码参考</strong>    </p><pre><code>  ```          // 使用自底向上的归并排序算法  template &lt;typename T&gt;  void mergeSortBU(T arr[], int n)&amp;#123;      // Merge Sort Bottom Up 优化      // 对于小数组, 使用插入排序优化      for( int i = 0 ; i &lt; n ; i += 16 )          insertionSort(arr,i,min(i+15,n-1));      for( int sz = 16; sz &lt; n ; sz += sz )          for( int i = 0 ; i &lt; n - sz ; i += sz+sz )              // 对于arr[mid] &lt;= arr[mid+1]的情况,不进行merge              if( arr[i+sz-1] &gt; arr[i+sz] )                  __merge(arr, i, i+sz-1, min(i+sz+sz-1,n-1) );      // Merge Sort BU 也是一个O(nlogn)复杂度的算法，虽然只使用两重for循环      // 所以，Merge Sort BU也可以在1秒之内轻松处理100万数量级的数据      // 注意：不要轻易根据循环层数来判断算法的复杂度，Merge Sort BU就是一个反例      // 关于这部分陷阱，推荐看（liubobo老师）的《玩转算法面试》课程，第二章：《面试中的复杂度分析》：）  &amp;#125;  ```</code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2></li></ul></li><li><p>基本思想： （分治） 将选定的元素放到合适的位置，然后 递归 排序 被该元素分开的 前 后 两个子序列。(分出来的两个子序列可能不等长，相差很大，会影响性能)</p></li><li><p>核心代码参考  </p><pre><code>```// 对arr[l...r]部分进行partition操作// 返回p, 使得arr[l...p-1] &lt; arr[p] ; arr[p+1...r] &gt; arr[p]template &lt;typename T&gt;int _partition(T arr[], int l, int r)&amp;#123;    // 随机在arr[l...r]的范围中, 选择一个数值作为标定点pivot    swap( arr[l] , arr[rand()%(r-l+1)+l] );    T v = arr[l];    int j = l;    for( int i = l + 1 ; i &lt;= r ; i ++ )        if( arr[i] &lt; v )&amp;#123;            j ++;            swap( arr[j] , arr[i] );        &amp;#125;    swap( arr[l] , arr[j]);    return j;&amp;#125;// 对arr[l...r]部分进行快速排序template &lt;typename T&gt;void _quickSort(T arr[], int l, int r)&amp;#123;    // 对于小规模数组, 使用插入排序进行优化    if( r - l &lt;= 15 )&amp;#123;        insertionSort(arr,l,r);        return;    &amp;#125;    int p = _partition(arr, l, r);    _quickSort(arr, l, p-1 );    _quickSort(arr, p+1, r);&amp;#125;```</code></pre></li><li><p>优化：  </p><pre><code>1. 标定点 随机选（针对基本有序的序列，如果固定选最前面的元素，则分治的两个子问题不平衡，退化为O(n^2)的复杂度）  2. 小规模排序，使用插入排序</code></pre></li><li><p>双路快排  </p><ul><li><p>基本思想：针对键值重复过多时，分治的两个子序列不等长，导致分治不平衡</p></li><li><p>核心代码参考</p><pre><code>// 双路快速排序的partition// 返回p, 使得arr[l...p-1] &lt;= arr[p] ; arr[p+1...r] &gt;= arr[p]// 双路快排处理的元素正好等于arr[p]的时候要注意，详见下面的注释：）template &lt;typename T&gt;int _partition2(T arr[], int l, int r)&amp;#123;    // 随机在arr[l...r]的范围中, 选择一个数值作为标定点pivot    swap( arr[l] , arr[rand()%(r-l+1)+l] );    T v = arr[l];    // arr[l+1...i) &lt;= v; arr(j...r] &gt;= v    int i = l+1, j = r;    while( true )&amp;#123;        // 注意这里的边界, arr[i] &lt; v, 不能是arr[i] &lt;= v        // 思考一下为什么?        while( i &lt;= r &amp;&amp; arr[i] &lt; v )            i ++;        // 注意这里的边界, arr[j] &gt; v, 不能是arr[j] &gt;= v        // 思考一下为什么?        while( j &gt;= l+1 &amp;&amp; arr[j] &gt; v )            j --;        // 对于上面的两个边界的设定, 有的同学在课程的问答区有很好的回答:)        // 大家可以参考: http://coding.imooc.com/learn/questiondetail/4920.html        if( i &gt; j )            break;        swap( arr[i] , arr[j] );        i ++;        j --;    &amp;#125;    swap( arr[l] , arr[j]);    return j;&amp;#125;// 对arr[l...r]部分进行快速排序template &lt;typename T&gt;void _quickSort(T arr[], int l, int r)&amp;#123;    // 对于小规模数组, 使用插入排序进行优化    if( r - l &lt;= 15 )&amp;#123;        insertionSort(arr,l,r);        return;    &amp;#125;    // 调用双路快速排序的partition    int p = _partition2(arr, l, r);    _quickSort(arr, l, p-1 );    _quickSort(arr, p+1, r);&amp;#125;</code></pre></li></ul></li><li><p>三路快排 </p><ul><li><p>基本思想： 针对2路快排的加强，进一步解决键值重复过多的问题（增加一个等值区域）</p></li><li><p>核心代码参考</p><pre><code>// 递归的三路快速排序算法template &lt;typename T&gt;void __quickSort3Ways(T arr[], int l, int r)&amp;#123;    // 对于小规模数组, 使用插入排序进行优化    if( r - l &lt;= 15 )&amp;#123;        insertionSort(arr,l,r);        return;    &amp;#125;    // 随机在arr[l...r]的范围中, 选择一个数值作为标定点pivot    swap( arr[l], arr[rand()%(r-l+1)+l ] );    T v = arr[l];    int lt = l;     // arr[l+1...lt] &lt; v    int gt = r + 1; // arr[gt...r] &gt; v    int i = l+1;    // arr[lt+1...i) == v    while( i &lt; gt )&amp;#123;        if( arr[i] &lt; v )&amp;#123;            swap( arr[i], arr[lt+1]);            i ++;            lt ++;        &amp;#125;        else if( arr[i] &gt; v )&amp;#123;            swap( arr[i], arr[gt-1]);            gt --;        &amp;#125;        else&amp;#123; // arr[i] == v            i ++;        &amp;#125;    &amp;#125;    swap( arr[l] , arr[lt] );    __quickSort3Ways(arr, l, lt-1);    __quickSort3Ways(arr, gt, r);&amp;#125;template &lt;typename T&gt;void quickSort3Ways(T arr[], int n)&amp;#123;    srand(time(NULL));    __quickSort3Ways( arr, 0, n-1);&amp;#125;// 比较Merge Sort和双路快速排序和三路快排三种排序算法的性能效率// 对于包含有大量重复数据的数组, 三路快排有巨大的优势// 对于一般性的随机数组和近乎有序的数组, 三路快排的效率虽然不是最优的, 但是是在非常可以接受的范围里// 因此, 在一些语言中, 三路快排是默认的语言库函数中使用的排序算法。比如Java:)</code></pre><h2 id="归并排序和快速排序衍生的问题"><a href="#归并排序和快速排序衍生的问题" class="headerlink" title="归并排序和快速排序衍生的问题"></a>归并排序和快速排序衍生的问题</h2></li></ul><ul><li>求逆序对（归并排序）</li><li>求数组中的第N大元素</li></ul></li></ul><hr><h1 id="第四章-堆和堆排序"><a href="#第四章-堆和堆排序" class="headerlink" title="第四章 堆和堆排序"></a>第四章 堆和堆排序</h1><h2 id="基本概念认识"><a href="#基本概念认识" class="headerlink" title="基本概念认识"></a>基本概念认识</h2><ul><li>队列<ul><li>普通队列：先进先出</li><li>优先队列：根据优先级出队  </li></ul></li><li><strong>优先队列应用</strong>  对动态的数据排序  </li><li>优先队列的三种实现方式  <table><thead><tr><th align="left">实现方式</th><th align="left">入队</th><th align="left">出队</th></tr></thead><tbody><tr><td align="left">普通数组</td><td align="left">O(1)</td><td align="left">O(n)</td></tr><tr><td align="left">顺序数组(元素有序)</td><td align="left">O(n)</td><td align="left">O(1)</td></tr><tr><td align="left">堆</td><td align="left">O(log n)</td><td align="left">O(log n)</td></tr></tbody></table></li></ul><h2 id="堆的基本存储"><a href="#堆的基本存储" class="headerlink" title="堆的基本存储"></a>堆的基本存储</h2><pre><code>* 用数组存储二叉堆* 数组的索引次序 对应 二叉堆中 层序遍历次序* 对于完全二叉树,对第i个元素，其与其父，其子的关系    * 根节点索引从0开始        * parent(i) = （i-1）/2        * left child (i) = 2*i +1        * right child (i) = 2*i + 2    * 根节点索引从1开始        * parent(i) = i/2        * left child (i) = 2*i         * right child (i) = 2*i + 1</code></pre><h3 id="heapfy过程（堆的建立）"><a href="#heapfy过程（堆的建立）" class="headerlink" title="heapfy过程（堆的建立）"></a>heapfy过程（堆的建立）</h3><pre><code>- 基本思想：从最后一个非叶子节点（索引为count/2，在根节点索引从1开始的情况下）开始，shiftdown()，自底向上实现堆- 将n个元素逐个插入空堆中，算法复杂度为O(n log n),而heapfy过程算法复杂度O(n)  - 代码```    // 构造函数, 通过一个给定数组创建一个最大堆    // 该构造堆的过程, 时间复杂度为O(n)    MaxHeap(Item arr[], int n)&amp;#123;        data = new Item[n+1];        capacity = n;        for( int i = 0 ; i &lt; n ; i ++ )            data[i+1] = arr[i];        count = n;        for( int i = count/2 ; i &gt;= 1 ; i -- )            shiftDown(i);    &amp;#125;```</code></pre><h2 id="ShiftUp-节点上移比较"><a href="#ShiftUp-节点上移比较" class="headerlink" title="ShiftUp(节点上移比较)"></a>ShiftUp(节点上移比较)</h2><pre><code>- 代码    ```        void shiftUp(int k)&amp;#123;        while( k &gt; 1 &amp;&amp; data[k/2] &lt; data[k] )&amp;#123;            swap( data[k/2], data[k] );            k /= 2;        &amp;#125;        &amp;#125;    ``` </code></pre><h2 id="ShiftDown（节点下移比较）"><a href="#ShiftDown（节点下移比较）" class="headerlink" title="ShiftDown（节点下移比较）"></a>ShiftDown（节点下移比较）</h2><pre><code>- 代码```    void shiftDown(int k)&#123;    while( 2*k &lt;= count )&#123;        int j = 2*k; // 在此轮循环中,data[k]和data[j]交换位置        if( j+1 &lt;= count &amp;&amp; data[j+1] &gt; data[j] )            j ++;        // data[j] 是 data[2*k]和data[2*k+1]中的最大值        if( data[k] &gt;= data[j] ) break;        swap( data[k] , data[j] );        k = j;    &#125;    &#125;```</code></pre><h2 id="堆排序及其优化"><a href="#堆排序及其优化" class="headerlink" title="堆排序及其优化"></a>堆排序及其优化</h2><pre><code>* 堆排序算法：    * 创建堆： 一种通过不断insert()创建O(nlogn)，一种传入数组用heapfy创建O(n)    * 堆顶出堆： 将堆顶与堆尾互换，堆的size-1,并将新的堆顶（原堆尾）shiftDown()    * 重复第二步  * 堆排序的实现    1. 借助insert()创建堆    ```    // heapSort1, 将所有的元素依次添加到堆中, 在将所有元素从堆中依次取出来, 即完成了排序    // 无论是创建堆的过程, 还是从堆中依次取出元素的过程, 时间复杂度均为O(nlogn)    // 整个堆排序的整体时间复杂度为O(nlogn)    template&lt;typename T&gt;    void heapSort1(T arr[], int n)&#123;        MaxHeap&lt;T&gt; maxheap = MaxHeap&lt;T&gt;(n);        for( int i = 0 ; i &lt; n ; i ++ )            maxheap.insert(arr[i]);        for( int i = n-1 ; i &gt;= 0 ; i-- )            arr[i] = maxheap.extractMax();    &#125;    2. 借助heapfy() 创建堆    // heapSort2, 借助我们的heapify过程创建堆    // 此时, 创建堆的过程时间复杂度为O(n), 将所有元素依次从堆中取出来, 实践复杂度为O(nlogn)    // 堆排序的总体时间复杂度依然是O(nlogn), 但是比上述heapSort1性能更优, 因为创建堆的性能更优    template&lt;typename T&gt;    void heapSort2(T arr[], int n)&#123;        MaxHeap&lt;T&gt; maxheap = MaxHeap&lt;T&gt;(arr,n);        for( int i = n-1 ; i &gt;= 0 ; i-- )            arr[i] = maxheap.extractMax();    &#125;    ```* 堆的实现细节    *ShiftUp和ShiftDown种使用复制操作替换swap操作*  </code></pre><h2 id="索引堆"><a href="#索引堆" class="headerlink" title="索引堆"></a>索引堆</h2><ul><li><p>基本思想： 分索引数组和数据数组，数据数组存数据元素。索引数组按堆的次序（比较的是实际元素的键值）存对应节点的索引（地址）。ShiftUP和ShiftDown中比较(实际元素的值)，交换对应的索引（存储地址），而不交换实际的元素。</p></li><li><p>一点理解： 维护了一个数组，既能有堆的特性（取最值），又能保持原有数组的存储次序（数据数组的索引是原数组的+1）。</p></li><li><p>ShfitUp()</p><pre><code>    // 索引堆中, 数据之间的比较根据data的大小进行比较, 但实际操作的是索引    void shiftUp( int k )&#123;    while( k &gt; 1 &amp;&amp; data[indexes[k/2]] &lt; data[indexes[k]] )&#123;        swap( indexes[k/2] , indexes[k] );        k /= 2;    &#125;&#125;</code></pre></li><li><p>ShiftDown()</p><pre><code>    // 索引堆中, 数据之间的比较根据data的大小进行比较, 但实际操作的是索引    void shiftDown( int k )&#123;        while( 2*k &lt;= count )&#123;            int j = 2*k;            if( j + 1 &lt;= count &amp;&amp; data[indexes[j+1]] &gt; data[indexes[j]] )                j += 1;            if( data[indexes[k]] &gt;= data[indexes[j]] )                break;            swap( indexes[k] , indexes[j] );            k = j;        &#125;    &#125;</code></pre></li><li><p>增删实现 (<strong>插入操作 不是很理解</strong>)</p><pre><code>    // 向最大索引堆中插入一个新的元素, 新元素的索引为i, 元素为item// 传入的i对用户而言,是从0索引的void insert(int i, Item item)&#123;    assert( count + 1 &lt;= capacity );    assert( i + 1 &gt;= 1 &amp;&amp; i + 1 &lt;= capacity );    i += 1;    data[i] = item;    indexes[count+1] = i;    count++;    shiftUp(count);&#125;// 从最大索引堆中取出堆顶元素, 即索引堆中所存储的最大数据Item extractMax()&#123;    assert( count &gt; 0 );    Item ret = data[indexes[1]];    swap( indexes[1] , indexes[count] );    count--;    shiftDown(1);    return ret;&#125;</code></pre></li><li><p>应用： 最小生成树Prim算法中，用来维护 每个节点对应的最小横切面的权重【同时能输出当前所有节点最小横切面中的最小横切面】</p><h2 id="涉及堆-的相关问题"><a href="#涉及堆-的相关问题" class="headerlink" title="涉及堆 的相关问题"></a>涉及堆 的相关问题</h2><ul><li>多路归并排序 多个元素同时比较的时候用，最小（大）堆</li><li>d叉堆 d-ary heap  </li><li>最大最小队列 （最大堆和最小堆同时维护？？）</li><li>二项堆</li><li>斐波那契堆</li></ul></li></ul><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><pre><code>基本思想： 分配 + 收集 （先排序低位再排序高位）</code></pre><h2 id="排序总结"><a href="#排序总结" class="headerlink" title="排序总结"></a>排序总结</h2><table><thead><tr><th align="left">排序</th><th align="left">平均时间复杂度</th><th align="left">原地排序</th><th align="left">额外空间</th><th align="left">稳定排序</th></tr></thead><tbody><tr><td align="left">插入排序（Insertion Sort）</td><td align="left">O(n^2)</td><td align="left">是</td><td align="left">O(1)</td><td align="left">是</td></tr><tr><td align="left">归并排序(Merge Sort)</td><td align="left">O（nlogn）</td><td align="left">否</td><td align="left">O(n)</td><td align="left">是</td></tr><tr><td align="left">快速排序（Quick Sort）</td><td align="left">O(nlogn)</td><td align="left">是</td><td align="left"><strong>O（logn）</strong></td><td align="left">否</td></tr><tr><td align="left">堆排序（Heap Sort)</td><td align="left">O(nlogn)</td><td align="left">是</td><td align="left">O(1)</td><td align="left">否</td></tr></tbody></table><ul><li><strong>不同排序算法的选择</strong>  <ul><li>n较小：直接插入排序或直接选择排序</li><li>基本有序序列，直接插入，冒泡，随机的快速排序</li><li>n较大，应选复杂度好的：快速排序，归并排序， 堆排序。<ul><li>快速排序性能平均最好，堆排序更少的辅助空间，归并排序是稳定的排序。（当排序数少于一定时如16，<strong>调用直接插入排序</strong>）  </li></ul></li></ul></li></ul><p><strong>其他参考</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMjIyOTk3LWIxYmIwNDg4NDlhMjI3YmUucG5n?x-oss-process=image/format,png" alt="排序算法总结"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cucnVub29iLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxOS8wMy9zb3J0LnBuZw?x-oss-process=image/format,png" alt="排序对比"><br><img src="https://img-blog.csdn.net/2018101109461342?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pocTExODY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><br> <a href="https://blog.csdn.net/liu17234050/article/details/104217658">C语言中的14种排序</a><br> <a href="https://v.qq.com/x/page/e0523qakza6.html">14中排序动画演示</a>   </p><hr><h1 id="第五章-二分搜索树"><a href="#第五章-二分搜索树" class="headerlink" title="第五章 二分搜索树"></a>第五章 二分搜索树</h1><h2 id="5-1-二分查找法"><a href="#5-1-二分查找法" class="headerlink" title="5-1 二分查找法"></a>5-1 二分查找法</h2><ul><li><p>基本思想： （递归分治）对有序序列，不需要逐一比较，只要比较中间值，然后确定目标值的可能区域，再在可能区域递归二分查找。</p></li><li><p>细节： </p><ol><li>计算中间值时， 注意防止越界（基本类型的范围）。<ul><li>合理写法： int mid = left + (right-left)/2 ，</li><li>危险写法： int mid = (left + right)/2</li></ul></li><li>二分查找返回的只有一个索引，而序列中可能存在重复值。如何返回所有重复值？<ul><li>练习：对于存在重复值的序列，返回目标值索引的floor(第一个索引)和ceil（最后一个索引）</li></ul></li></ol></li><li><p>改进：（选不同的分割点）</p><ul><li>插值查找 （按比值分割） <ul><li>mid = left + (right-left)*&#123;(key-a[left])/(a[right]-a[left])&#125;</li></ul></li><li>斐波那契查找<ul><li>mid = left + F_block - 1 (黄金分割)<h2 id="5-2-二分搜索树"><a href="#5-2-二分搜索树" class="headerlink" title="5-2 二分搜索树"></a>5-2 二分搜索树</h2></li></ul></li></ul></li><li><p>二分搜索树的定义：</p><ul><li>左子树&gt;(&lt;) 根 &gt;(&lt;) 右子树 [一般不考虑键值重复的问题]</li></ul></li><li><p>二分搜索树的优势</p><ul><li>高效(（O(nlogn))的维护数据的有序性：min,max,floor,ceil,rank,select</li></ul></li><li><p>二分搜索树的节点插入</p><ul><li><p>实现方式： </p><ol><li><p>递归(返回子树根节点)[从根节点开始搜索，找到key值则替换，未找到则根据比较关系递归子树]</p><pre><code class="Cpp"> // 向以node为根的二分搜索树中, 插入节点(key, value), 使用递归算法 // 返回插入新节点后的二分搜索树的根 private Node insert(Node node, Key key, Value value)\&amp;#123;     if( node == null )&amp;#123;         count ++;         return new Node(key, value);     &amp;#125;     if( key.compareTo(node.key) == 0 )         node.value = value;     else if( key.compareTo(node.key) &lt; 0 )         node.left = insert( node.left , key, value);     else    // key &gt; node-&gt;key         node.right = insert( node.right, key, value);     return node; &amp;#125;</code></pre></li><li><p>迭代</p><ul><li>当作练习</li></ul></li></ol></li></ul></li><li><p>二分搜索书的查找  </p><ul><li>基本思想: 二分查找</li></ul></li><li><p>二分搜索树的遍历</p><ul><li>（深度优先遍历）  <ul><li>前序遍历，中序遍历，后序遍历</li></ul></li><li>（广度优先遍历）<ul><li>层序遍历</li></ul></li></ul></li><li><p>删除最大值，最小值  </p><ul><li>实现：<ul><li>递归：（不断递归(左/右)子树，直到节点没有（左/右）子树，删除该节点，返回其的（右/左）子树赋值给上一节点的（左/右）子树）</li></ul></li></ul></li><li><p>删除Key对应的节点</p><ul><li>实现： <ul><li>递归<ul><li>从根节点开始递归搜索<ul><li>如果目标值在根节点则删除根节点，选新的中间值上位（左子树最右（大/小）的节点，右子树最左（小/大）的节点）</li><li>否则根据比较次序，选择（左/右）子树递归搜索，根节点的（左/右）子树 = 返回删除最值后的子树的根节点<h2 id="5-3-二分搜索树的特性"><a href="#5-3-二分搜索树的特性" class="headerlink" title="5-3 二分搜索树的特性"></a>5-3 二分搜索树的特性</h2></li><li>顺序性</li><li>minimum/maximum</li><li>successor/predecessor 后继/前继</li><li>floor/ceil （存在键值重复时，索引的范围）</li><li>rank/select 已知key获取排名/已知排名获取key,value</li></ul></li></ul></li></ul></li></ul><ul><li><p>局限性：(不平衡) 依照顺序或逆序插入元素，二分搜索树退化为链表（跟节点为第一个元素，在最左，或最右）。</p></li><li><p>支持重复键值的二分搜索树</p><ul><li>思路一： 让键值重复节点的右子树或左子树包含键值重复的节点。</li><li>思路二： 每个节点增加一个区域（链表或数组），存键值相等的元素</li></ul></li></ul></li></ul><h2 id="二叉平衡树"><a href="#二叉平衡树" class="headerlink" title="二叉平衡树"></a>二叉平衡树</h2><pre><code>- 平衡二叉树：    - 左右子树高度差不超过1的二叉搜索树，即平衡二叉树所有结点的平衡因子绝对值不超过1（平衡因子 = 结点左子树的高度 - 结点右子树的高度）。- 实现方式：    - AVL树    - 红黑树    - 2-3树    - Splay树</code></pre><h2 id="AVL-树"><a href="#AVL-树" class="headerlink" title="AVL 树"></a>AVL 树</h2><ul><li>基本思想，每插入一个节点，自底向上维护树的平衡，以及每个节点的平衡因子</li><li>平衡调整的四种类型：<ul><li>LL型 右旋调整 调整后涉及到的节点的平衡因子（bf）均为0</li><li>RR型 左旋调整 调整后涉及到的节点的平衡因子(bf)均为0</li><li>LR型 先左旋调整至LL型， 然后右旋调整 bf的维护如下： </li><li>RL型 先右旋调整至RR型， 然后左旋调整<br><img src="/source/pictures/%E5%B9%B3%E8%A1%A1%E8%B0%83%E6%95%B4%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%B1%BB%E5%9E%8B.bmp"></li></ul></li></ul><ul><li><p>插入操作思路整理：</p><ul><li>考虑当前节点的子树是否添加了新节点<ul><li>没有 则不用维护，直接返回</li><li>左子树添加了新节点 <strong>&gt;&gt;&gt;</strong> 当前节点的平衡因子要加一($bf= bf+1$)<ul><li>若$bf&gt;1$(需要平衡调整) <strong>&gt;&gt;&gt;</strong> 进行左平衡调整</li></ul></li><li>右子树添加了新节点 <strong>&gt;&gt;&gt;</strong> 当前节点的平衡因子要减一($bf = bf -1$)<ul><li>若$bf&lt;-1$，需要平衡调整 **&gt;&gt;&gt;** 进行右平衡调整</li></ul></li></ul></li></ul></li><li><p>左平衡调整(cur.bf &gt; 1)</p><ul><li>看cur的左子节点L 的平衡因子 L.bf<ul><li>L.bf == 1 <strong>&gt;&gt;&gt;</strong> LL型 <strong>&gt;&gt;&gt;</strong> 右旋操作</li><li>L.bf == -1 <strong>&gt;&gt;&gt;</strong> LR型 <strong>&gt;&gt;&gt;</strong> 先左旋调整至LL型，然后右旋调整</li></ul></li></ul></li><li><p>右平衡调整(cur.bf &lt; -1)</p><ul><li>看cur节点的右孩子节点R 的平衡因子R.bf<ul><li>R.bf == -1 <strong>&gt;&gt;&gt;</strong> RR型 <strong>&gt;&gt;&gt;</strong> 左旋操作</li><li>R.bf == 1 <strong>&gt;&gt;&gt;</strong> RL型 <strong>&gt;&gt;&gt;</strong> 先右旋调整至RR型，然后左旋调整</li></ul></li></ul></li><li><p>插入操作代码</p><pre><code class="Java">  //插入操作  void insert(K key,V value) &amp;#123;      taller = false; //增加了新的一层？？      root = __insert(root,key,value);  &amp;#125;  //返回插入新节点后的根节点  private AVLNode __insert(AVLNode curNode,K key,V value) &amp;#123;      if(curNode==null) &amp;#123;          curNode = new AVLNode(key,value);          taller = true; //增加了新节点          return curNode;//      &amp;#125;      else &amp;#123;          if(key.compareTo(curNode.key)==0) &amp;#123;              return curNode;//节点已经存在，返回（不覆盖旧值）          &amp;#125;          else if(key.compareTo(curNode.key)&lt;0) &amp;#123;              curNode.left = __insert(curNode.left,key,value); //往左子树新增节点              if(taller) &amp;#123;//增加了新节点                  switch(curNode.bf) &amp;#123;                      case 0: //新增节点没有打破平衡，但bf+1                          curNode.bf = 1;//左边新加一个点                          taller = true;//此处很重要，自底 向上传递平衡信息                          break;                      case 1:  //本来左子树多一个结点，然后taller为true,左子树又增加了一个结点                          curNode = leftBalance(curNode); //左平衡时必须保证 curNode具有左孩子                          taller = false; //左平衡后 达到平衡                          break;                      case -1: //新增节点使得curNode左右平衡                          curNode.bf = 0;                          taller = false;                          break;                  &amp;#125;              &amp;#125;              return curNode;          &amp;#125;          else &amp;#123; //往当前节点的右子树增添节点              curNode.right = __insert(curNode.right,key,value);//往右子树增加节点              if(taller) &amp;#123;                  switch(curNode.bf) &amp;#123;                      case 0:                          curNode.bf = -1;                          taller = true;                          break;                      case 1:                           curNode.bf = 0;                           taller = false;                           break;                      case -1:                          curNode = rightBalance(curNode);                          taller = false;                          break;                          &amp;#125;              &amp;#125;              return curNode;          &amp;#125;      &amp;#125;  &amp;#125;</code></pre></li><li><p>左平衡调整代码</p><pre><code class="Java">  /*   * 左平衡操作   */  //[当前curNode的bf&gt;0，又再左子树增加节点时需要左平衡操作]  AVLNode leftBalance(AVLNode curNode) &amp;#123;      AVLNode L = curNode.left;      if(L.bf==1) &amp;#123; //LL型需要左旋          curNode.bf = 0;//右旋平衡          L.bf = 0;//右旋平衡          return rightRotate(curNode);      &amp;#125;      else if(L.bf==-1) &amp;#123;//LR型需要 先左旋  后右旋          AVLNode LR = L.right; //左孩子的右孩子          //以下代码不是很理解,,,画一下实际例子可以明白，，但为啥子LR.bf不会一直被维护为0？（因为LR不一定是新增节点?）          switch(LR.bf) &amp;#123;              case 1:                  curNode.bf = -1;                  L.bf = 0;                  break;              case 0:                  curNode.bf = 0;                  L.bf = 0;                  break;              case -1:                  curNode.bf = 0;                  L.bf = 1;                  break;          &amp;#125;          LR.bf = 0;          curNode.left = leftRotate(curNode.left);          return rightRotate(curNode);      &amp;#125;      else &amp;#123;//不需要左平衡处理          return curNode;      &amp;#125;  &amp;#125;</code></pre></li><li><p>右平衡调整代码</p><pre><code class="Java">  //右平衡操作  /*   * curNode bf本已经-1的基础上，在右方又新增节点   */  AVLNode rightBalance(AVLNode curNode) &amp;#123;      AVLNode R = curNode.right;      if(R.bf==-1) &amp;#123; //RR型           curNode.bf = 0;          R.bf = 0;          return leftRotate(curNode);      &amp;#125;      else if(R.bf==1) &amp;#123;//RL型          AVLNode RL = R.left;          switch(RL.bf) &amp;#123;              case 0:                  curNode.bf = 0;                  R.bf = 0;                  break;              case 1:                  R.bf =-1;                  curNode.bf = 0;                  break;              case -1:                  curNode.bf = 1;                  R.bf = 0;                  break;          &amp;#125;          RL.bf = 0;          curNode.right = rightRotate(R);          return leftRotate(curNode);      &amp;#125;      else &amp;#123;          return curNode;      &amp;#125;  &amp;#125;</code></pre></li><li><p>左旋操作</p><pre><code class="Java">  //左旋操作  AVLNode leftRotate(AVLNode curNode) &amp;#123;      AVLNode subRoot = curNode.right;      curNode.right = subRoot.left;      subRoot.left = curNode;      return subRoot;  &amp;#125;</code></pre></li><li><p>右旋操作</p><pre><code class="Java">  //右旋操作  AVLNode rightRotate(AVLNode curNode) &amp;#123;      AVLNode subRoot = curNode.left;//左孩子上位      curNode.left = subRoot.right;//把你的右孩子给我，作为我的左孩子(保证排序性)      subRoot.right = curNode;//你上位后我成为你的有孩子      return subRoot;  &amp;#125;</code></pre></li><li><p>其他操作实现：</p><ul><li>可参考&lt;&lt;数据结构从应用到时间（Java版）&gt;&gt;<h2 id="5-5-多路查找树"><a href="#5-5-多路查找树" class="headerlink" title="5-5 多路查找树"></a>5-5 多路查找树</h2></li></ul></li><li><p>多路查找树的意义</p><blockquote><p>对于树来说，一个结点只能存储一个元素，那么在元素非常多的时候，就会使得要么树的度非常大（结点拥有子树的个数的最大值），要么树的高度非常大，甚至两者都必须足够大才行，这就使得内存存取外存次数非常多，这显然成了时间效率上的瓶颈，这迫使我们要打破每一个结点只存储一个元素的限制，为此引入了多路查找树的概念</p></blockquote></li><li><p>2-3 树 </p><ul><li>每个结点都具有两个孩子（我们称它为 2 结点）或三个孩子（我们称它为 3 结点）的树</li><li>特性  <pre><code>      一个 2 结点 包含一个元素和两个孩子（或没有孩子），且左子树数据元素小于该元素右子树数据元素大于该元素    一个 3 结点 包含一小一大两个元素和三个孩子（或没有孩子）    如果有 3 个孩子的话    左子树包含小于较小元素的元素    右子树包含大于较大元素的元素    中间子树包含介于两元素之间的元素</code></pre></li></ul></li><li><p>2-3-4 树</p></li><li><p>B 树</p><h2 id="5-6-树形问题和更多树。"><a href="#5-6-树形问题和更多树。" class="headerlink" title="5-6 树形问题和更多树。"></a>5-6 树形问题和更多树。</h2><ul><li>平衡二叉树和堆的结合Treap</li><li>trie ：查找效率与单词长度有关，与单词中的单词数量无关</li><li>其他树形(递归)问题：<ul><li>一条龙游戏</li><li>8 数码问题</li><li>8 皇后问题</li><li>数独</li><li>搬运工</li></ul></li><li>更多树的结构<ul><li>KD树</li><li>区间树</li><li>哈夫曼树</li></ul></li></ul></li></ul><hr><h1 id="第六章-并查集"><a href="#第六章-并查集" class="headerlink" title="第六章:并查集"></a>第六章:并查集</h1><h2 id="6-1-并查集基础"><a href="#6-1-并查集基础" class="headerlink" title="6-1 并查集基础"></a>6-1 并查集基础</h2><ul><li><p>解决的问题： </p><ul><li>连接问题， 数学中集合类的实现，</li><li>路径问题</li></ul></li><li><p>并查集的基本方法</p><ul><li>union(p,q) 将p与q 联合 （同属一个集合（连通分支））</li><li>find(p) 查找p所在集合序号</li><li>isConnect(p,q) </li></ul></li><li><p>并查集的实现</p><ul><li><p>数组实现（QuickFind） （数组索引为元素键值，数组值为对应的集合号）</p><ul><li>union(p,q) 需要遍历更新所有元素的集合号，时间复杂度O(n)</li><li>find(p) 直接数组下标查找，O(1) </li><li>isConnect()  复杂度O(1)</li></ul></li><li><p>树形实现（数组索引为元素键值，数组值为该节点的父节点的索引）</p><ul><li><p>union(p,q) 时间复杂度O(h)，h为树的高度 </p></li><li><p>find(p) 需要回溯到(所在分支的)跟节点，O(h)，h为树的高度 </p></li><li><p>isConnect()  复杂度O(h，h为树的高度 </p></li><li><p>树形实现中 union() 的三种实现方式（不断改进（降低）树的高度h）</p><ul><li>随机合并</li><li>基于size的优化 <ul><li>维护一个size数组，存每个分支的元素多少</li><li>将元素较少的树合并到元素较多的的树 新的分支size = size1 + size2</li></ul></li><li>基于rank的优化 <ul><li>维护一个rank数组，存每个分支对应树的高度</li><li>将高度小的和平到高度大的</li></ul></li></ul></li><li><p>find() 过程中的 路径压缩（降低树的高度）</p><ul><li><p>基本思想： 基于树形实现的并查集，在find()时，需要回溯到分支树的根节点，在回溯的过程，可以将树的高度进行调整。</p></li><li><p>具体实现思路： 回溯过程中，将当前节点的父节点不断向上更新</p></li><li><p>代码</p><pre><code class="cpp">// 查找过程, 查找元素p所对应的集合编号// O(h)复杂度, h为树的高度private int find(int p)&amp;#123;  assert( p &gt;= 0 &amp;&amp; p &lt; count );  // path compression 1  while( p != parent[p] )&amp;#123;      parent[p] = parent[parent[p]]; //指向父节点的父节点      p = parent[p];  &amp;#125;  return p;  // path compression 2, 递归算法//            if( p != parent[p] )//                parent[p] = find( parent[p] );//            return parent[p];&amp;#125;</code></pre></li></ul></li></ul></li></ul></li><li><p>并查集的应用</p><ul><li>题目<ul><li>leetcode130_<a href="https://leetcode-cn.com/problems/surrounded-regions/">被围绕的区域</a></li></ul></li></ul></li></ul><hr><h1 id="第七章-图"><a href="#第七章-图" class="headerlink" title="第七章: 图"></a>第七章: 图</h1><h2 id="7-1-图论基础"><a href="#7-1-图论基础" class="headerlink" title="7-1 图论基础"></a>7-1 图论基础</h2><ul><li>图的应用<ul><li>通信网路</li><li>社交网络</li><li>状态机等</li></ul></li><li>图的分类<ul><li>无权图与有权图</li><li>有向图与无向图</li></ul></li><li>图的表示<ul><li>（n,m） n个顶点，m条边</li><li>邻接矩阵 $n * n$矩阵 适合稠密图</li><li>邻接表  适合稀疏图</li><li>其他<h2 id="7-2-相邻点迭代器"><a href="#7-2-相邻点迭代器" class="headerlink" title="7-2 相邻点迭代器"></a>7-2 相邻点迭代器</h2></li></ul></li><li>图遍历过程中，避不开的便是遍历当前节点的相邻节点</li><li>迭代器的思想： 对外提供访问数据的功能，同时避免内部数据直接暴露在外</li><li>复杂度分析<ul><li>邻接矩阵 O(n) </li><li>邻接表 O(m)<h2 id="7-4-图的算法框架"><a href="#7-4-图的算法框架" class="headerlink" title="7-4 图的算法框架"></a>7-4 图的算法框架</h2></li></ul></li><li>读图方式（仅限本课程）<ul><li>不断添加边（需要知道顶点数）</li></ul></li></ul><h2 id="7-5-深度优先遍历和联通分量"><a href="#7-5-深度优先遍历和联通分量" class="headerlink" title="7-5 深度优先遍历和联通分量"></a>7-5 深度优先遍历和联通分量</h2><ul><li>深度优先遍历（DFS)<ul><li>基本思想 递归</li><li>复杂分析<ul><li>邻接表O（V+E）</li><li>邻接矩阵O(V^2)</li></ul></li></ul></li><li>求连通分支<ul><li>维护一个size为顶点数的vis数组 （可以存每个节点是否被访问，也可以每个节点存属于哪个分支）</li><li>对每一个没有被访问的节点进行深度优先遍历</li></ul></li><li>寻路<ul><li>维护一个from 数组 ，from[i]存第i个节点在dfs(s)过程中的上一个节点</li><li>从$s$ 节点开始 dfs()</li><li>从目的点d 开始，根据from数组回溯，得到s到d的路径<h2 id="7-7-广度优先遍历和最短路径"><a href="#7-7-广度优先遍历和最短路径" class="headerlink" title="7-7 广度优先遍历和最短路径"></a>7-7 广度优先遍历和最短路径</h2></li></ul></li><li>广度优先遍历<ul><li>基本思想 迭代</li><li>实现细节<ul><li><strong>处理环</strong>： 相对于树来说 图存在环的可能，所以遍历的时候是<strong>将加入队列的元素标记为已访问</strong>，而不是访问结点时才标记。</li></ul></li><li>复杂度分析<ul><li>邻接表O（V+E）</li><li>邻接矩阵O(V^2)</li></ul></li><li>求 无权图的 <strong>最短路径</strong><ul><li>维护一个from（回溯）数组，from[i]存第i个节点到dfs(s)过程中的上一个节点</li><li>维护一个order数组， order[i] 存 第i个节点在从s开始的bfs过程中的第几层（最短距离）</li><li>从$s$ 节点开始 bfs()</li><li>从 d 开始，根据from数组回溯<h2 id="7-8-更多无权图的应用"><a href="#7-8-更多无权图的应用" class="headerlink" title="7-8 更多无权图的应用"></a>7-8 更多无权图的应用</h2></li></ul></li></ul></li><li>迷宫生成，ps抠图等 </li></ul><hr><h1 id="第八章：最小生成树"><a href="#第八章：最小生成树" class="headerlink" title="第八章：最小生成树"></a>第八章：最小生成树</h1><h2 id="8-1-最小生成树问题和切分定理"><a href="#8-1-最小生成树问题和切分定理" class="headerlink" title="8-1 最小生成树问题和切分定理"></a>8-1 最小生成树问题和切分定理</h2><ul><li>最小生成树的应用<ul><li>电缆布线设计，网络设计，电路设计等。</li></ul></li><li>最小生成树的适用范围<ul><li>主要针对 带权 无向 连通图</li></ul></li><li>切分定理<ul><li>相关概念<ul><li>切分</li><li>横切边</li></ul></li><li><strong>切分定理</strong>： 给定任意切分，横切边中权值最小的边必然属于最小生成树<h2 id="8-2-Prim算法及其优化"><a href="#8-2-Prim算法及其优化" class="headerlink" title="8-2 Prim算法及其优化"></a>8-2 Prim算法及其优化</h2></li></ul></li><li>Lazy Prim 算法<ul><li>基本思想： 迭代/递归 贪心（每次根据切分定理得到局部最优） 动态规划？</li><li>算法流程<ul><li>递归/迭代遍历节点</li><li>将节点集合 分为  已经<strong>被访问过的节点</strong>和<strong>未被访问过的节点</strong>，并将切分这两个集合的<strong>横切边</strong>存入最小堆中 </li><li>每次选择最小堆中的横切边 出堆<ul><li>若 该横切边的两个端点均 已经被访问 ， 丢弃该边， 不做操作</li><li>否则， 将该边加入最小生成树中，继续<strong>遍历 该边中未被访问的点</strong>。</li></ul></li></ul></li><li>lazy体现在（局限性）: <ul><li>最小堆中，维护的横切边中，有很多不再时横切边的 没有及时丢弃。</li><li>复杂度 O(ElogE)</li></ul></li></ul></li><li>Prim算法的优化<ul><li>用<strong>索引堆</strong> (pq)来维护 <ul><li>每个已经被访问的点对应的最小横切边 的权重。pq.get（i） 表示第i个节点关联的当前最小横切边权重</li><li>上述横切边集合中 的 最小横切边的权重 （最小中的最小） （及堆顶）</li><li>用 edgeTo 辅助维护 边的信息（起始点）</li></ul></li><li>用 vis 数组来维护 节点是否已被访问</li><li>Prim 算法流程<ul><li>初始化： 将起始点的横切边 的权值加入索引堆<strong>pq</strong>中，起始点标记为 已经被访问</li><li>循环：<ul><li>选<strong>pq</strong>中 最小权值的横切边<strong>e</strong> 加入到最小生成树的 边集合</li><li><strong>递归</strong> 选出来边<strong>e</strong>的两个端点中 未被访问的节点v：<ul><li>端点v 标记为 已经被访问</li><li>遍历端点v 的 邻接边<strong>adjEdge</strong>，邻接边的另一个端点<strong>w</strong><ul><li>保证**pq[w]**小（(与w节点关联的当前最小横切边的权重）<ul><li>若<strong>pq[w]</strong>) 为空，则将 <strong>adjEdge</strong> 的权重 更新至 <strong>pq[w]</strong></li><li>或者若<strong>adjEdge</strong>的权重小于 <strong>pq[w]</strong>  则将 <strong>adjEdge</strong> 的权重更新至<strong>pq[w]</strong></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>复杂度分析 O(ElogV)</li></ul></li></ul><h2 id="8-3-Krusk算法"><a href="#8-3-Krusk算法" class="headerlink" title="8-3 Krusk算法"></a>8-3 Krusk算法</h2><ul><li>基本思想： 贪心 不断将<strong>不与已添加的边构成圈的最小边</strong> 加入到生成树边集合种</li><li>数据结构<ul><li>用最小堆，维护边集合，保证每次能取出剩余边中的最小边</li><li>用并查集，维护节点在当前生成树边集合下的连通度，判断新增边是否构成环</li></ul></li><li>算法流程<ul><li>对边进行排序(复杂度O(ElogE))，用最最小堆来维护边集合。</li><li>将最小边出堆，并加入生成树的集合。</li><li>循环开始：<ul><li>将 剩余边集合中 最小边 出堆<ul><li>判断改边与 生成树边集合中的边是否 构成环 （用并查集判断）<ul><li>若成环 抛弃， 继续找下一个边</li><li>将改边加入生成树的边集合</li></ul></li></ul></li></ul></li><li>复杂度分析 O(ElogE)<h2 id="8-6-最小生成树算法的思考"><a href="#8-6-最小生成树算法的思考" class="headerlink" title="8-6 最小生成树算法的思考"></a>8-6 最小生成树算法的思考</h2></li></ul></li><li>其他最小生成树的算法<ul><li>Vyssotsky’s Algorithm 将边逐渐添加到生成树中，一旦形成环，删除环中权值最大的边</li></ul></li></ul><hr><h1 id="第九章：最短路径"><a href="#第九章：最短路径" class="headerlink" title="第九章：最短路径"></a>第九章：最短路径</h1><h2 id="9-1-最短路径问题和松弛操作"><a href="#9-1-最短路径问题和松弛操作" class="headerlink" title="9-1 最短路径问题和松弛操作"></a>9-1 最短路径问题和松弛操作</h2><ul><li>最短路径的应用<ul><li>路径规划</li><li>工作任务计划</li></ul></li><li>广度优先遍历 求 无权图 的最短路径<ul><li>最短路径树 （单源最短路径：一点到所有其他点的最短路径）</li></ul></li><li>松弛操作(Relaxation)<ul><li>考虑经过该节点的 是否有到达其他节点的更短的路径<h2 id="9-2-Dijkstra算法的思想"><a href="#9-2-Dijkstra算法的思想" class="headerlink" title="9-2 Dijkstra算法的思想"></a>9-2 Dijkstra算法的思想</h2></li></ul></li><li>适用条件<ul><li>图中不能有<strong>负权边</strong></li><li>复杂度O(E log V)</li></ul></li><li>实现<ul><li>数据结构：<ul><li>索引堆： 维护每个节点当前被到达的最短路径， 以及 所有最短路径中的最短路径<ul><li>辅助：访问标记数组： 存当前节点是否进行了松弛操作</li></ul></li><li>回溯数组: 存到达该节点的最短路径中的上一个节点</li></ul></li></ul></li><li>算法流程<ul><li>初始化数据结构：<ul><li>索引堆<code>IndexMinHeap(imh)</code> imh[w] 表示第w个节点当前最短路径的权值</li><li>访问数组 <code>boolean[] marked</code>， marked[i] 表示第 i 个节点<strong>是否</strong>进行过松弛操作，初始都为false</li><li>回溯数组<code>int[] from</code>, from[i] 表示目的点为第i个节点的上一个节点，初始均赋值为-1</li></ul></li><li>初始化：将 源节点 $s$ 到自身的路径的权重 加入索引堆</li><li>循环（直至索引堆为空）<ul><li>当前距离源节点$s$ 最近的节点  $v$ ， 出堆<ul><li>如果 $v$ 没有进行过松弛操作（marked[v]==false）, 则对其进行 <strong>松弛操作</strong>：<ul><li>对 $v$ 所有邻节点 $w$ :<ul><li>如果 $w$ 没有进行过松弛操作（$marked[v]==false$）<ul><li>$s$ 经过 $v$ 到达 $w$ 的最短路径为：$dis = dis(s,v) + dis(v,w)$</li><li><code>if from[w]==-1||ids&lt;imh[w]</code> <ul><li><code>imh[w] = dis</code></li><li><code>from[w] = v</code></li></ul></li></ul></li></ul></li><li><code>marked[v] = true</code></li></ul></li></ul></li></ul></li><li>实现代码：<ul><li>初始化及核心代码<pre><code class="java">//初始化  marked = new boolean[graph.V()];from = new int[graph.V()];for(int i=0;i&lt;graph.V();i++) &amp;#123;    from[i] = -1;    marked[i] = false;&amp;#125;//DijkstraIndexMinHeap&lt;Weight&gt; imh = new IndexMinHeap&lt;&gt;(graph.V());imh.insert(s, (Weight)(Number)(0.0));while(!imh.isEmpty()) &amp;#123;    int v = imh.extractMinIndex();    if(!marked[v])         Relaxation(v,imh); //Relaxation松弛操作&amp;#125;</code></pre></li></ul></li></ul></li></ul><pre><code>  - 松弛操作```java        //松弛操作        void Relaxation(int v, IndexMinHeap imh) &amp;#123;        marked[v] = true;        //遍历邻边        for(Edge&lt;Weight&gt; e : (List&lt;Edge&gt;)graph.adj(v)) &amp;#123;            int w = e.getOther(v);            if(!marked[w])            &amp;#123;                Double dis = e.getW().doubleValue()+(((Number) imh.getItem(v)).doubleValue());                if(from[w] == -1||imh.getItem(w).compareTo(dis)&gt;0) &amp;#123;                    if(!imh.contain(w))                        imh.insert(w,dis);                    else                         imh.change(w, dis);                    from[w] = v;                &amp;#125;            &amp;#125;        &amp;#125;</code></pre><h2 id="9-3-负权边和Bellman-Ford算法"><a href="#9-3-负权边和Bellman-Ford算法" class="headerlink" title="9-3 负权边和Bellman-Ford算法"></a>9-3 负权边和Bellman-Ford算法</h2><ul><li><p>负权边带来的问题</p><ul><li>每次选择的并不是</li><li>负权环</li></ul></li><li><p>Bellman-Ford 单源最短路径算法</p><ul><li>前提： 图中不能有<strong>负权环</strong></li><li>Bellman-Ford 可以判断图中是否有负权环<ul><li>如果一个图没有负权环，则：<ul><li>从一个顶点到另一个顶点的最短路径，最多经过所有($V$)的顶点，即有$V-1$条边</li></ul></li><li>否则， 存在 顶点 经过了两次， 即 存在<strong>负</strong>权环</li></ul></li><li>复杂度 $O(EV)$</li></ul></li><li><p>Bellman-Ford 基本思想</p><ul><li>对所有点进行 $v-1$ 次 松弛操作，如果还可以继续松弛，则存在负权环</li><li>对所有点(V)进行松弛操作， 遍历所有的边(E),复杂度为O(VE)??</li></ul></li><li><p>算法流程</p><ul><li>Initial: from[s] = s; distTo[s] = 0;//初始化源节点 信息 </li><li>for pass = 1:G.V()-1 : //遍历 G.V()-1 遍<ul><li>for(int v=0; v &lt; G.V();v++) : //每一遍对每个节点进行一次松弛操作<ul><li>Relaxation(v)：<ul><li>如果$v$可达，遍历 $v$ 的所有邻接点 $wi$：<ul><li>$dis = dis(s,v) + dis(v,wi)$</li><li>if from[w]==-1||dis &lt; dis(s,w) :<ul><li>dis(s,w) = dis;</li><li>from[w] = v;</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>//对每个节点再进行一次松弛操作，如果路径还能再减，则存在<strong>负权环</strong></li></ul></li><li><p>实现代码</p><pre><code class="java">      // Bellman-Ford的过程      // 进行V-1次循环, 每一次循环求出从起点到其余所有点, 最多使用pass步可到达的最短距离      for( int pass = 1 ; pass &lt; G.V() ; pass ++ )&amp;#123;          // 每次循环中对所有的边进行一遍松弛操作          // 遍历所有边的方式是先遍历所有的顶点, 然后遍历和所有顶点相邻的所有边          for( int i = 0 ; i &lt; G.V() ; i ++ )&amp;#123;              // 使用我们实现的邻边迭代器遍历和所有顶点相邻的所有边              for( Object item : G.adj(i) )&amp;#123;                  Edge&lt;Weight&gt; e = (Edge&lt;Weight&gt;)item;                  // 对于每一个边首先判断e-&gt;v()可达                  // 之后看如果e-&gt;w()以前没有到达过， 显然我们可以更新distTo[e-&gt;w()]                  // 或者e-&gt;w()以前虽然到达过, 但是通过这个e我们可以获得一个更短的距离, 即可以进行一次松弛操作, 我们也可以更新distTo[e-&gt;w()]                  if( from[e.v()] != null &amp;&amp; (from[e.w()] == null || distTo[e.v()].doubleValue() + e.wt().doubleValue() &lt; distTo[e.w()].doubleValue()) )&amp;#123;                      distTo[e.w()] = distTo[e.v()].doubleValue() + e.wt().doubleValue();                      from[e.w()] = e;                  &amp;#125;              &amp;#125;          &amp;#125;      &amp;#125;</code></pre></li><li><p>检测是否有负权环</p><pre><code class="java"> // 判断图中是否有负权环  boolean detectNegativeCycle()&amp;#123;      for( int i = 0 ; i &lt; G.V() ; i ++ )&amp;#123;          for( Object item : G.adj(i) )&amp;#123;              Edge&lt;Weight&gt; e = (Edge&lt;Weight&gt;)item;              if( from[e.v()] != null &amp;&amp; distTo[e.v()].doubleValue() + e.wt().doubleValue() &lt; distTo[e.w()].doubleValue() )                  return true;          &amp;#125;      &amp;#125;      return false;  &amp;#125;</code></pre></li></ul><pre><code>- queue-based Bellman-Ford  - 对Bellman-Ford的优化- 其他  - 处理负权边通常是针对 **有向图**， 因为无向图的负权边 本身就是一个**负权环**##    9-4 更多和最短路径相关的思考  - 单源最短路径算法总结算法|边的权重|图的有向性|复杂度  :---|:---|:---|:---dijkstra|无负权边|有向，无向图均可|$O(ElogV)$Bellman-Ford|无负权环|有向图,或无负权边的无向图|$O(ElogV)$利用拓扑排序|有向无环图（DAG）|有向图|$O(V+E)$- 所有对最短路径算法  - Floyed算法， 处理无负权环的图，复杂度$O(V^3)$- 最长路径算法  - 不能有正权环  - 无权图的最长路径问题是指数难度的  - 对于有权图，不能使用Dijkstra求最长路径问题  - 可以使用Bellman-Ford (把所有路径都取负)---  # 第十章：结束语线性问题 &gt;&gt; 树形问题 &gt;&gt; 图形问题- 线性问题  - 排序问题    - $O(n^2)$ 选择排序 插入排序    - $O(nlog(n))$ 归并排序 快速排序 - 更多的算法问题  - 数据结构相关    - 双向队列    - 斐波那契堆    - 红黑树    - 区间树    - KD树    - ...  - 具体领域相关    - 数学： 数论 计算几何    - 图论： 网络流- 算法设计相关  - 分治算法    - 归并排序，快速算法， 树结构  - 贪心    - 选择排序； 堆 ； Kruskal ; Prim; Dijkstra ;...  - 递归回溯    - 树的遍历    - 图的遍历  - 动态规划    - 思想： **最优子结构**    - Prim ; Dijkstra - 大家加油！！</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;慕课网-算法与数据结构-学习总结&lt;/strong&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;第一章-引言&quot;&gt;&lt;a href=&quot;#第一章-引言&quot; class=&quot;headerlink&quot; title=&quot;第一章 引</summary>
      
    
    
    
    
    <category term="LearnNotes" scheme="http://yoursite.com/tags/LearnNotes/"/>
    
  </entry>
  
  <entry>
    <title>markdown基础</title>
    <link href="http://yoursite.com/2020/08/12/markdown%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/08/12/markdown%E5%9F%BA%E7%A1%80/</id>
    <published>2020-08-12T07:46:38.000Z</published>
    <updated>2020-08-12T07:53:50.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown-基础入门"><a href="#markdown-基础入门" class="headerlink" title="markdown 基础入门"></a>markdown 基础入门</h1><h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><pre><code>换行：两次空格回车  </code></pre><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://ns-strategy.cdn.bcebos.com/ns-strategy/upload/fc_big_pic/part-00782-3232.jpg" alt="风景">  </p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="https://github.com/">github</a>  </p><hr><blockquote><p>高亮显示</p></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表用-或-或-表示"><a href="#无序列表用-或-或-表示" class="headerlink" title="无序列表用 * 或 + 或 - 表示"></a>无序列表用 * 或 + 或 - 表示</h3><ul><li>A  </li><li>B</li></ul><ul><li>C  </li><li>C</li></ul><ul><li>D  </li><li>E<h3 id="有序列表-数字加-标识-如-1"><a href="#有序列表-数字加-标识-如-1" class="headerlink" title="有序列表 数字加. 标识 如 1."></a>有序列表 数字加. 标识 如 1.</h3></li></ul><ol><li>I</li><li>love</li></ol><h3 id="使用列表的注意事项"><a href="#使用列表的注意事项" class="headerlink" title="使用列表的注意事项"></a>使用列表的注意事项</h3><h5 id="如果在单一列表项中包含了多个段落，为了保证渲染正常，-与段落首字母之间必须保留四个空格"><a href="#如果在单一列表项中包含了多个段落，为了保证渲染正常，-与段落首字母之间必须保留四个空格" class="headerlink" title="如果在单一列表项中包含了多个段落，为了保证渲染正常，*与段落首字母之间必须保留四个空格"></a>如果在单一列表项中包含了多个段落，为了保证渲染正常，*与段落首字母之间必须保留四个空格</h5><ul><li>段落一<br>小段一</li><li>段落二<br>小段二<h5 id="另外，如果在列表中加入了区块引用，区域引用标记符也需要缩进4个空格"><a href="#另外，如果在列表中加入了区块引用，区域引用标记符也需要缩进4个空格" class="headerlink" title="另外，如果在列表中加入了区块引用，区域引用标记符也需要缩进4个空格"></a>另外，如果在列表中加入了区块引用，区域引用标记符也需要缩进4个空格</h5></li><li>段落一  <blockquote><p>区块标记1  </p></blockquote></li><li>段落二<blockquote><p>区块标记2  </p></blockquote></li></ul><p>注：记住一个原则，如果在和列表配合使用的时候出现了问题，就缩进一次，四个空格或者一个制表符代表一次缩进。如果一次缩进没有解决问题，那就两次。  </p><hr><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p><em>斜体</em><br><em>斜体</em></p><p><strong>加粗</strong><br><strong>加粗</strong></p><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="插入代码块"><a href="#插入代码块" class="headerlink" title="插入代码块"></a>插入代码块</h3><p>使用反引号`(esc下那个键)进行包裹，如果是行内代码引用，使用单个反引号包裹。  </p><p>java 的 <code>toString()</code> 与 <code>hashcode</code>  </p><pre><code>     String toString()&amp;#123;     &amp;#125;</code></pre><pre><code>     cout&lt;&lt;&quot;hello world&quot;&lt;&lt;endl;</code></pre><p>插入表格  </p><table><thead><tr><th align="left">表头</th><th align="left">条目1</th><th align="left">条目2</th></tr></thead><tbody><tr><td align="left">项目</td><td align="left">项目1</td><td align="left">项目2</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="特殊符号处理"><a href="#特殊符号处理" class="headerlink" title="特殊符号处理"></a>特殊符号处理</h3><pre><code>     \   反斜线     `   反引号     *   星号     _   底线     &amp;#123;&amp;#125;  花括号     []  方括号     ()  括弧     #   井字号     +   加号     -   减号     .   英文句点     !   惊叹号</code></pre><blockquote><p>Markdown使用反斜杠\插入语法中用到的特殊符号。例如，如果你需要插入反斜杠，就连续输入两个反斜杠即可：<code>\\</code> =&gt; \ 。在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。</p></blockquote><h3 id="给文字上色"><a href="#给文字上色" class="headerlink" title="给文字上色"></a>给文字上色</h3><pre><code>先用Markdown编辑完成导出为html，在需要上色的部分手动添加标签&lt;font color=&#39;#ff0000&#39;&gt;&lt;/font&gt;保存即可。</code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jianshu.com/p/335db5716248">最完整的Markdown基础教程</a><br><a href="https://www.jianshu.com/c/65c0f5f216cc">Markdown 语法快速上手</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;markdown-基础入门&quot;&gt;&lt;a href=&quot;#markdown-基础入门&quot; class=&quot;headerlink&quot; title=&quot;markdown 基础入门&quot;&gt;&lt;/a&gt;markdown 基础入门&lt;/h1&gt;&lt;h1 id=&quot;基本&quot;&gt;&lt;a href=&quot;#基本&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tagTest1</title>
    <link href="http://yoursite.com/2020/08/12/tagTest1/"/>
    <id>http://yoursite.com/2020/08/12/tagTest1/</id>
    <published>2020-08-12T05:15:31.000Z</published>
    <updated>2020-08-12T05:15:31.875Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>用hexo搭建博客笔记</title>
    <link href="http://yoursite.com/2020/08/12/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/08/12/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-12T02:57:45.000Z</published>
    <updated>2020-08-12T07:35:16.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li>nodejs</li><li>git</li><li>淘宝镜像源</li><li>hexo 安装</li></ol><h2 id="hexo-使用"><a href="#hexo-使用" class="headerlink" title="hexo 使用"></a>hexo 使用</h2><p>hexo s</p><p>hexo new “filename”</p><p>hexo init</p><p>hexo clean</p><p>hexo generate</p><p>配置git 仓库</p><p>hexo d</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;nodejs&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;淘宝镜像源&lt;/li&gt;
&lt;li&gt;hexo 安装&lt;/li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MyFirstBlog</title>
    <link href="http://yoursite.com/2020/08/12/MyFirstBlog/"/>
    <id>http://yoursite.com/2020/08/12/MyFirstBlog/</id>
    <published>2020-08-12T02:34:43.000Z</published>
    <updated>2020-08-12T02:41:31.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p> 开始你的表演</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>你的表演满分</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.woyaobaofu.com/">www.woyaobaofu.com</a></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;p&gt; 开始你的表演&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第二章&quot;&gt;&lt;a href=&quot;#第二章&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/08/12/hello-world/"/>
    <id>http://yoursite.com/2020/08/12/hello-world/</id>
    <published>2020-08-12T02:29:59.599Z</published>
    <updated>2020-08-12T02:29:59.599Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
